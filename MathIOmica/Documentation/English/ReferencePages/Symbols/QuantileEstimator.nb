(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 12.1' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    282007,       6835]
NotebookOptionsPosition[    264226,       6473]
NotebookOutlinePosition[    266473,       6530]
CellTagsIndexPosition[    266386,       6525]
WindowTitle->QuantileEstimator
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell[BoxData[GridBox[{
   {Cell["MATH I OMICA PACKAGE SYMBOL", "PacletNameCell"], Cell[TextData[{
     Cell[BoxData[
      ActionMenuBox[
       FrameBox[
        InterpretationBox[Cell[TextData[{
          "Tutorials",
          StyleBox[" \[FilledDownTriangle]", "AnchorBarArrow",
           StripOnInput->False]
         }]],
         TextCell[
          Row[{"Tutorials", 
            Style[" \[FilledDownTriangle]", "AnchorBarArrow"]}]]],
        StripOnInput->False], {"\<\"MathIOmicaTutorial\"\>":>
       Documentation`HelpLookup[
       "paclet:MathIOmica/tutorial/MathIOmicaTutorial"], "\<\"MathIOmica \
Dynamic Transcriptome\"\>":>Documentation`HelpLookup[
       "paclet:MathIOmica/tutorial/MathIOmicaDynamicTranscriptome"]},
       Appearance->None,
       MenuAppearance->Automatic,
       MenuStyle->"Tutorials"]],
      LineSpacing->{1.4, 0}],
     "\[ThickSpace]\[ThickSpace]\[ThickSpace]\[ThickSpace]\[ThickSpace]\
\[ThickSpace]",
     Cell[BoxData[
      ActionMenuBox[
       FrameBox[
        InterpretationBox[Cell[TextData[{
          "See Also",
          StyleBox[" \[FilledDownTriangle]", "AnchorBarArrow",
           StripOnInput->False]
         }]],
         TextCell[
          Row[{"See Also", 
            Style[" \[FilledDownTriangle]", "AnchorBarArrow"]}]]],
        StripOnInput->False], {"\<\"Autocorrelation\"\>":>
       Documentation`HelpLookup[
       "paclet:MathIOmica/ref/Autocorrelation"], "\<\"BootstrapGeneral\"\>":>
       Documentation`HelpLookup[
       "paclet:MathIOmica/ref/BootstrapGeneral"], "\<\"LombScargle\"\>":>
       Documentation`HelpLookup[
       "paclet:MathIOmica/ref/LombScargle"], "\<\"OmicsObject\"\>":>
       Documentation`HelpLookup["paclet:MathIOmica/ref/OmicsObject"]},
       Appearance->None,
       MenuAppearance->Automatic,
       MenuStyle->"SeeAlso"]],
      LineSpacing->{1.4, 0}],
     "\[ThickSpace]\[ThickSpace]\[ThickSpace]\[ThickSpace]\[ThickSpace]\
\[ThickSpace]",
     Cell[BoxData[
      ActionMenuBox[
       FrameBox[
        InterpretationBox[Cell[TextData[{
          "Related Guides",
          StyleBox[" \[FilledDownTriangle]", "AnchorBarArrow",
           StripOnInput->False]
         }]],
         TextCell[
          Row[{"Related Guides", 
            Style[" \[FilledDownTriangle]", "AnchorBarArrow"]}]]],
        StripOnInput->False], {"\<\"MathIOmica Guide\"\>":>
       Documentation`HelpLookup["paclet:MathIOmica/guide/MathIOmicaGuide"]},
       Appearance->None,
       MenuAppearance->Automatic,
       MenuStyle->"MoreAbout"]],
      LineSpacing->{1.4, 0}],
     "\[ThickSpace]\[ThickSpace]\[ThickSpace]\[ThickSpace]\[ThickSpace]\
\[ThickSpace]",
     Cell[BoxData[
      ActionMenuBox[
       FrameBox[
        InterpretationBox[Cell[TextData[{
          "URL",
          StyleBox[" \[FilledDownTriangle]", "AnchorBarArrow",
           StripOnInput->False]
         }]],
         TextCell[
          Row[{"URL", 
            Style[" \[FilledDownTriangle]", "AnchorBarArrow"]}]]],
        StripOnInput->False], {"\<\"MathIOmica/ref/QuantileEstimator\"\>":>
       None, "\<\"Copy Wolfram Documentation Center URL\"\>":>
       Module[{DocumentationSearch`Private`nb$}, 
        DocumentationSearch`Private`nb$ = NotebookPut[
           Notebook[{
             Cell["MathIOmica/ref/QuantileEstimator"]}, Visible -> False]]; 
        SelectionMove[DocumentationSearch`Private`nb$, All, Notebook]; 
        FrontEndTokenExecute[DocumentationSearch`Private`nb$, "Copy"]; 
        NotebookClose[DocumentationSearch`Private`nb$]; Null], 
       Delimiter, "\<\"Copy web URL\"\>":>
       Module[{DocumentationSearch`Private`nb$}, 
        DocumentationSearch`Private`nb$ = NotebookPut[
           Notebook[{
             Cell[
              BoxData[
               MakeBoxes[
                Hyperlink[
                "http://reference.wolfram.com/language/MathIOmica/ref/\
QuantileEstimator.html"], StandardForm]], "Input", TextClipboardType -> 
              "PlainText"]}, Visible -> False]]; 
        SelectionMove[DocumentationSearch`Private`nb$, All, Notebook]; 
        FrontEndTokenExecute[DocumentationSearch`Private`nb$, "Copy"]; 
        NotebookClose[DocumentationSearch`Private`nb$]; 
        Null], "\<\"Go to web URL\"\>":>FrontEndExecute[{
         NotebookLocate[{
           URL[
            StringJoin[
             If[
              TrueQ[DocumentationBuild`Make`Private`wsmlinkQ$58480], 
              "http://reference.wolfram.com/system-modeler/", 
              "http://reference.wolfram.com/language/"], 
             "MathIOmica/ref/QuantileEstimator", ".html"]], None}]}]},
       Appearance->None,
       MenuAppearance->Automatic,
       MenuStyle->"URLMenu"]],
      LineSpacing->{1.4, 0}]
    }], "AnchorBar"]}
  }]], "AnchorBarGrid",
 CellID->1],

Cell[CellGroupData[{

Cell[TextData[{
 Cell["QuantileEstimator", "ObjectName"],
 Cell[BoxData[
  TemplateBox[{8},
   "Spacer1"]]],
 Cell[BoxData[""], "ObjectNameTranslation"]
}], "ObjectNameGrid"],

Cell[BoxData[GridBox[{
   {"", Cell[TextData[{
     Cell[BoxData[
      RowBox[{"QuantileEstimator", "[", 
       RowBox[{
        StyleBox["data", "TI"], ",", " ", 
        StyleBox["timepoints", "TI"]}], "]"}]], "InlineFormula"],
     "\[LineSeparator]obtains the quantile estimator following bootstrap for \
time series."
    }]]}
  }]], "Usage",
 GridBoxOptions->{
 GridBoxBackground->{"Columns" -> {{None}}, "Rows" -> {{None}}}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[Cell[BoxData[
 ButtonBox[Cell[TextData[{
   Cell[BoxData[
    TemplateBox[{6},
     "Spacer1"]]],
   "Details"
  }], "NotesFrameText"],
  Appearance->{Automatic, None, "Normal", Automatic},
  BaseStyle->None,
  ButtonFunction:>(FrontEndExecute[{
     FrontEnd`SelectionMove[
      FrontEnd`SelectedNotebook[], All, ButtonCell], 
     FrontEndToken["OpenCloseGroup"], 
     FrontEnd`SelectionMove[
      FrontEnd`SelectedNotebook[], After, CellContents]}]& ),
  Evaluator->None,
  Method->"Preemptive"]]]], "NotesSection",
 WholeCellGroupOpener->True,
 CellGroupingRules->{"SectionGrouping", 50},
 CellID->1227999055],

Cell["", "SectionHeaderSpacer"],

Cell[TextData[{
 "The ",
 Cell[BoxData[
  RowBox[{"QuantileEstimator", "[", 
   RowBox[{
    StyleBox["data", "TI"], ",", " ", 
    StyleBox["timepoints", "TI"]}], "]"}]], "InlineFormula"],
 " function calculates the quantile value that can be used as a cutoff for \
classification of time series based on bootstrap simulations",
 ". ",
 "It takes two inputs:"
}], "Notes",
 CellID->992580824],

Cell[BoxData[GridBox[{
   {Cell["      ", "TableRowIcon"], 
    StyleBox["data", "TI"], Cell["\<\
Association or list with series as values, from which to generate a \
distribution.\
\>", "TableText"]},
   {Cell["      ", "TableRowIcon"], 
    StyleBox["timepoints", "TI"], Cell[
    "Timepoints over which the time series run.", "TableText"]}
  }]], "2ColumnTableMod",
 GridBoxOptions->{
 GridBoxBackground->{"Columns" -> {{None}}, "Rows" -> {None, {None}}},
 GridBoxDividers->{"Rows" -> {{True, True, True}}}},
 CellID->27415112],

Cell["The following options can be given: ", "Notes"],

Cell[BoxData[GridBox[{
   {Cell["      ", "TableRowIcon"], "AutocorrelationOptions", 
    RowBox[{"{", "}"}], Cell["\<\
Specific options when calculating autocorrelations for the time series.\
\>", "TableText"]},
   {Cell["      ", "TableRowIcon"], "InterpolationDeltaT", "\"\<Auto\>\"", 
    Cell["\<\
Time step used to grid the time window over which calculations will be \
performed. If set to \"Auto\" the step will correspond to dividing the span \
of the interval into a number of equal steps equal to the number of input \
time points.\
\>", "TableText"]},
   {Cell["      ", "TableRowIcon"], "InterpolationOptions", 
    RowBox[{"{", "}"}], Cell["\<\
Options list for the internal Interpolation function used to interpolate \
between data points that have Missing values or uneven spacing.\
\>", "TableText"]},
   {Cell["      ", "TableRowIcon"], "LombScargleOptions", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"PairReturn", " ", "\[Rule]", "  ", "False"}], ",", 
      RowBox[{"NormalizeIntensities", "\[Rule]", " ", "True"}]}], "}"}], 
    Cell["\<\
Specific options when calculating LombScargle periodograms for the time \
series.\
\>", "TableText"]},
   {Cell["      ", "TableRowIcon"], 
    ButtonBox["Method",
     BaseStyle->"Link",
     ButtonData->"paclet:ref/Method"], "\"\<LombScargle\>\"", Cell["\<\
Method of calculation. Choices include one of the following: \
{\"LombScargle\",\"Autocorrelation\", \
\"InterpolatedAutocorrelation\",\"Spikes\"}\
\>", "TableText"]},
   {Cell["      ", "TableRowIcon"], "QuantileValue", "0.95", Cell[
    "Which quantile to extract.", "TableText"]}
  }]], "3ColumnTableMod",
 GridBoxOptions->{
 GridBoxBackground->{
  "Columns" -> {{None}}, "Rows" -> {None, None, None, None, None, {None}}},
 GridBoxDividers->{"Rows" -> {{True, True, True, True, True, True, True}}}},
 CellID->1380656426],

Cell["\<\
QuantileEstimator returns different output depending on the method :\
\>", "Notes",
 CellID->285909606],

Cell[BoxData[GridBox[{
   {Cell["      ", "TableRowIcon"], 
    StyleBox["Method",
     FontWeight->"Bold"], Cell[TextData[StyleBox["Output format",
     FontWeight->"Bold"]], "TableText"]},
   {Cell["      ", "TableRowIcon"], "\"\<Autocorrelation\>\"", Cell[
    TextData[{
     "List of values corresponding to selected quantile of autocorrelations, \
with the ith lag quantile provided as the ith index, i.e. ",
     Cell[BoxData[
      FormBox[
       RowBox[{
        SubscriptBox["\[Rho]", "c"], "=", 
        RowBox[{"{", 
         RowBox[{
          SubscriptBox["\[Rho]", "c1"], ",", 
          SubscriptBox["\[Rho]", 
           RowBox[{"c2", ","}]], ",", "...", ",", 
          SubscriptBox["\[Rho]", 
           RowBox[{"ci", ","}]], ",", "...", ",", " ", 
          SubscriptBox["\[Rho]", "ck"]}], "}"}]}], TraditionalForm]]],
     " up to k lags, where 1\[LessEqual] k \[LessEqual] n, and typically \
n=Floor[Length[timepoints]/2].  The method utilizes the ",
     Cell[BoxData[
      TemplateBox[{
        Cell[
         TextData["Autocorrelation"]], 
        "paclet:MathIOmica/ref/Autocorrelation"},
       "RefLink",
       BaseStyle->{"InlineFormula"}]], "InlineFormula"],
     " function internally."
    }], "TableText"]},
   {Cell["      ", "TableRowIcon"], "\"\<InterpolatedAutocorrelation\>\"", 
    Cell[TextData[{
     "List of values corresponding to selected quantile for autocorrelations, \
with the ith lag quantile provided as the ith index, i.e. ",
     Cell[BoxData[
      FormBox[
       RowBox[{
        SubscriptBox["\[Rho]", "c"], "=", 
        RowBox[{"{", 
         RowBox[{
          SubscriptBox["\[Rho]", "c1"], ",", 
          SubscriptBox["\[Rho]", 
           RowBox[{"c2", ","}]], ",", "...", ",", 
          SubscriptBox["\[Rho]", 
           RowBox[{"ci", ","}]], ",", "...", ",", " ", 
          SubscriptBox["\[Rho]", "ck"]}], "}"}]}], TraditionalForm]]],
     " up to k lags, where 1\[LessEqual] k \[LessEqual] n, and typically \
n=(Length[timepoints]-1). The method utilizes an ",
     ButtonBox["Interpolation",
      BaseStyle->"Link",
      ButtonData->"paclet:ref/Interpolation"],
     " followed by a ",
     ButtonBox["CorrelationFunction",
      BaseStyle->"Link",
      ButtonData->"paclet:ref/CorrelationFunction"],
     " implementation to compute autocorrelations, i.e. missing data or \
uneven sampling is handled by data interpolation."
    }], "TableText"]},
   {Cell["      ", "TableRowIcon"], "\"\<LombScargle\>\"", Cell[TextData[{
     "Single value corresponding to selected quantile of maximum peak \
intensity of periodogram. The method utilizes the ",
     Cell[BoxData[
      TemplateBox[{
        Cell[
         TextData["LombScargle"]], "paclet:MathIOmica/ref/LombScargle"},
       "RefLink",
       BaseStyle->{"InlineFormula"}]], "InlineFormula"],
     " function internally."
    }], "TableText"]},
   {Cell["      ", "TableRowIcon"], "\"\<Spikes\>\"", Cell[TextData[{
     "Association with number, n, of data points as keys, and values \
corresponding to quantiles for maxima and minima of the series, in the form ",
     
     Cell[BoxData[
      RowBox[{"<|", 
       RowBox[{"n", "\[Rule]", " ", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Maximum", " ", "Spike", " ", 
           SubscriptBox["Quantile", "n"]}], ",", 
          RowBox[{"Maximum", " ", "Spike", " ", 
           SubscriptBox["Quantile", "n"]}]}], "}"}]}], "|>"}]], 
      "InlineFormula"],
     " . The keys are generated automatically so that so that ",
     Cell[BoxData[
      RowBox[{
       RowBox[{"Keys", "[", "output", "]"}], "\[Element]", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
         "Possible", " ", "lengths", " ", "of", " ", "numeric", " ", "data"}],
          "}"}], "."}]}]], "InlineFormula"],
     " ,  i.e. all possible lengths of input series constructed by excluding \
Missing or other non-numeric values)."
    }], "TableText"]}
  }]], "2ColumnTableMod",
 GridBoxOptions->{
 GridBoxBackground->{
  "Columns" -> {{None}}, "Rows" -> {None, None, None, None, {None}}},
 GridBoxDividers->{"Rows" -> {{True, True, True, True, True, True}}}},
 CellID->2062196345],

Cell["", "SectionFooterSpacer"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 Cell[BoxData[
  TemplateBox[{6},
   "Spacer1"]]],
 "Examples",
 "\[NonBreakingSpace]\[NonBreakingSpace]",
 Cell["(11)", "ExampleCount"]
}], "PrimaryExamplesSection",
 WholeCellGroupOpener->True,
 CellTags->"PrimaryExamplesSection",
 CellID->1662269715],

Cell[CellGroupData[{

Cell[TextData[{
 "Basic Examples",
 "\[NonBreakingSpace]\[NonBreakingSpace]",
 Cell["(1)", "ExampleCount"]
}], "ExampleSection", "ExampleSection",
 WholeCellGroupOpener->True,
 CellID->1152336182],

Cell["\<\
Assuming we have a bootstrap distribution that has been analyzed as the rest \
of the data we can proceed directly to the application of the \
QuantileEstimator function. For the purpose of illustration we first create \
the datasets and analyze them including filters. \
\>", "ExampleText",
 CellID->584355490]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "Example for Spikes",
 "\[NonBreakingSpace]\[NonBreakingSpace]",
 Cell["(1)", "ExampleCount"]
}], "ExampleSection",
 WholeCellGroupOpener->True,
 CellID->764448546],

Cell[BoxData[
 RowBox[{"Needs", "[", "\"\<MathIOmica`\>\"", "]"}]], "Input",
 CellLabel->"In[1]:=",
 CellID->1872068367],

Cell[TextData[{
 "As an example, let's assume we have a random series for which we would like \
to evaluate the maxima or minima (e.g. to use in a ",
 Cell[BoxData[
  TemplateBox[{
    Cell[
     TextData["TimeSeriesClassification"]], 
    "paclet:MathIOmica/ref/TimeSeriesClassification"},
   "RefLink",
   BaseStyle->{"InlineFormula"}]], "InlineFormula"],
 " computation). We generate some data first for a series of varying lengths, \
8 through 10:"
}], "ExampleText",
 CellID->1936718175],

Cell[BoxData[
 RowBox[{
  RowBox[{"randomSeries", "=", 
   RowBox[{"Join", "[", 
    RowBox[{
     RowBox[{"RandomReal", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"-", "1"}], ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"10", "^", "6"}], ",", "8"}], "}"}]}], "]"}], ",", 
     RowBox[{"RandomReal", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"-", "1"}], ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"10", "^", "6"}], ",", "9"}], "}"}]}], "]"}], ",", 
     RowBox[{"RandomReal", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"-", "1"}], ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"10", "^", "6"}], ",", "10"}], "}"}]}], "]"}]}], "]"}]}], 
  ";"}]], "Input",
 CellLabel->"In[2]:=",
 CellID->2008746089],

Cell["\<\
We can obtain an association of length to quantiles for maxima or minima:\
\>", "ExampleText",
 CellID->2139257847],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"bootstrapSpikes", "=", 
  RowBox[{"QuantileEstimator", "[", 
   RowBox[{"randomSeries", ",", 
    RowBox[{"{", "}"}], ",", 
    RowBox[{"Method", "\[Rule]", "\"\<Spikes\>\""}]}], " ", "]"}]}]], "Input",\

 CellLabel->"In[3]:=",
 CellID->2081616074],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"8", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"0.9873164265105672`", ",", 
      RowBox[{"-", "0.9873057948626425`"}]}], "}"}]}], ",", 
   RowBox[{"9", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"0.9886621256173127`", ",", 
      RowBox[{"-", "0.9886466463538226`"}]}], "}"}]}], ",", 
   RowBox[{"10", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"0.9898237287299279`", ",", 
      RowBox[{"-", "0.9897332792471634`"}]}], "}"}]}]}], 
  "\[RightAssociation]"}]], "Output",
 CellLabel->"Out[3]=",
 CellID->1182692406]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "Extended Example To Create Bootstrap Dataset",
 "\[NonBreakingSpace]\[NonBreakingSpace]",
 Cell["(1)", "ExampleCount"]
}], "ExampleSection",
 WholeCellGroupOpener->True,
 CellID->1631825547],

Cell[BoxData[
 RowBox[{"Needs", "[", "\"\<MathIOmica`\>\"", "]"}]], "Input",
 CellLabel->"In[1]:=",
 CellID->796347577],

Cell["\<\
Let's import the example transcriptome data to generate a set to sample. \
These are located at:\
\>", "ExampleText",
 CellID->2095379217],

Cell[BoxData[
 RowBox[{"exampleRNAFile", "=", 
  RowBox[{"FileNameJoin", "@", 
   RowBox[{"{", 
    RowBox[{
    "ConstantMathIOmicaExamplesDirectory", ",", "\"\<rnaExample\>\""}], 
    "}"}]}]}]], "Input",
 CellLabel->"In[4]:=",
 CellID->308114169],

Cell["We can now get the data:", "ExampleText",
 CellID->1657780598],

Cell[BoxData[
 RowBox[{
  RowBox[{"exampleRNAData", "=", 
   RowBox[{"Get", "[", "exampleRNAFile", "]"}]}], ";"}]], "Input",
 CellLabel->"In[6]:=",
 CellID->907864055],

Cell["\<\
We can now perform a resampling of this set. For the example let's only \
create 20000 members for each set (actual application may need more, but this \
will suffice for illustrating the function usage).\
\>", "ExampleText",
 CellID->674676559],

Cell[BoxData[
 RowBox[{
  RowBox[{"bootstrapSets", "=", 
   RowBox[{"BootstrapGeneral", "[", 
    RowBox[{"exampleRNAData", ",", "20000"}], "]"}]}], ";"}]], "Input",
 CellLabel->"In[7]:=",
 CellID->919442043],

Cell["\<\
We can look at this example (please note that if you repeat the steps above \
you will most likely get a different dataset as this is a random selection \
process). We query again the first 5 elements in each dataset:\
\>", "ExampleText",
 CellID->617424127],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Query", "[", 
   RowBox[{"All", ",", 
    RowBox[{"1", ";;", "5"}]}], "]"}], "@", "bootstrapSets"}]], "Input",
 CellLabel->"In[8]:=",
 CellID->1073555929],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"7\"\>", "\[Rule]", 
    RowBox[{"\[LeftAssociation]", 
     RowBox[{
      RowBox[{"1", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", "0", "}"}], ",", 
         RowBox[{"{", "\<\"OK\"\>", "}"}]}], "}"}]}], ",", 
      RowBox[{"2", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", "1.42823`", "}"}], ",", 
         RowBox[{"{", "\<\"OK\"\>", "}"}]}], "}"}]}], ",", 
      RowBox[{"3", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", "0.120562`", "}"}], ",", 
         RowBox[{"{", "\<\"OK\"\>", "}"}]}], "}"}]}], ",", 
      RowBox[{"4", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", "0.0244774`", "}"}], ",", 
         RowBox[{"{", "\<\"OK\"\>", "}"}]}], "}"}]}], ",", 
      RowBox[{"5", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", "35.8455`", "}"}], ",", 
         RowBox[{"{", "\<\"OK\"\>", "}"}]}], "}"}]}]}], 
     "\[RightAssociation]"}]}], ",", 
   RowBox[{"\<\"8\"\>", "\[Rule]", 
    RowBox[{"\[LeftAssociation]", 
     RowBox[{
      RowBox[{"1", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", "1.04973`", "}"}], ",", 
         RowBox[{"{", "\<\"OK\"\>", "}"}]}], "}"}]}], ",", 
      RowBox[{"2", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", "0.526297`", "}"}], ",", 
         RowBox[{"{", "\<\"OK\"\>", "}"}]}], "}"}]}], ",", 
      RowBox[{"3", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", "0", "}"}], ",", 
         RowBox[{"{", "\<\"OK\"\>", "}"}]}], "}"}]}], ",", 
      RowBox[{"4", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", "8.49264`", "}"}], ",", 
         RowBox[{"{", "\<\"OK\"\>", "}"}]}], "}"}]}], ",", 
      RowBox[{"5", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", "0.00230458`", "}"}], ",", 
         RowBox[{"{", "\<\"OK\"\>", "}"}]}], "}"}]}]}], 
     "\[RightAssociation]"}]}], ",", 
   RowBox[{"\<\"9\"\>", "\[Rule]", 
    RowBox[{"\[LeftAssociation]", 
     RowBox[{
      RowBox[{"1", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", "0", "}"}], ",", 
         RowBox[{"{", "\<\"OK\"\>", "}"}]}], "}"}]}], ",", 
      RowBox[{"2", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", "3.14157`", "}"}], ",", 
         RowBox[{"{", "\<\"OK\"\>", "}"}]}], "}"}]}], ",", 
      RowBox[{"3", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", "6.00749`", "}"}], ",", 
         RowBox[{"{", "\<\"OK\"\>", "}"}]}], "}"}]}], ",", 
      RowBox[{"4", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", "532.922`", "}"}], ",", 
         RowBox[{"{", "\<\"OK\"\>", "}"}]}], "}"}]}], ",", 
      RowBox[{"5", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", "0.0326532`", "}"}], ",", 
         RowBox[{"{", "\<\"OK\"\>", "}"}]}], "}"}]}]}], 
     "\[RightAssociation]"}]}], ",", 
   RowBox[{"\<\"10\"\>", "\[Rule]", 
    RowBox[{"\[LeftAssociation]", 
     RowBox[{
      RowBox[{"1", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", "35.5092`", "}"}], ",", 
         RowBox[{"{", "\<\"OK\"\>", "}"}]}], "}"}]}], ",", 
      RowBox[{"2", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", "2.42909`", "}"}], ",", 
         RowBox[{"{", "\<\"OK\"\>", "}"}]}], "}"}]}], ",", 
      RowBox[{"3", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", "0.00791471`", "}"}], ",", 
         RowBox[{"{", "\<\"OK\"\>", "}"}]}], "}"}]}], ",", 
      RowBox[{"4", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", "14.241`", "}"}], ",", 
         RowBox[{"{", "\<\"OK\"\>", "}"}]}], "}"}]}], ",", 
      RowBox[{"5", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", "0.0226409`", "}"}], ",", 
         RowBox[{"{", "\<\"OK\"\>", "}"}]}], "}"}]}]}], 
     "\[RightAssociation]"}]}], ",", 
   RowBox[{"\<\"11\"\>", "\[Rule]", 
    RowBox[{"\[LeftAssociation]", 
     RowBox[{
      RowBox[{"1", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", "16.1855`", "}"}], ",", 
         RowBox[{"{", "\<\"OK\"\>", "}"}]}], "}"}]}], ",", 
      RowBox[{"2", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", "0", "}"}], ",", 
         RowBox[{"{", "\<\"OK\"\>", "}"}]}], "}"}]}], ",", 
      RowBox[{"3", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", "0", "}"}], ",", 
         RowBox[{"{", "\<\"OK\"\>", "}"}]}], "}"}]}], ",", 
      RowBox[{"4", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", "0.0982475`", "}"}], ",", 
         RowBox[{"{", "\<\"OK\"\>", "}"}]}], "}"}]}], ",", 
      RowBox[{"5", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", "0", "}"}], ",", 
         RowBox[{"{", "\<\"OK\"\>", "}"}]}], "}"}]}]}], 
     "\[RightAssociation]"}]}], ",", 
   RowBox[{"\<\"12\"\>", "\[Rule]", 
    RowBox[{"\[LeftAssociation]", 
     RowBox[{
      RowBox[{"1", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", "0.136295`", "}"}], ",", 
         RowBox[{"{", "\<\"OK\"\>", "}"}]}], "}"}]}], ",", 
      RowBox[{"2", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", "3.44357`", "}"}], ",", 
         RowBox[{"{", "\<\"OK\"\>", "}"}]}], "}"}]}], ",", 
      RowBox[{"3", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", "0.520754`", "}"}], ",", 
         RowBox[{"{", "\<\"OK\"\>", "}"}]}], "}"}]}], ",", 
      RowBox[{"4", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", "6.90194`", "}"}], ",", 
         RowBox[{"{", "\<\"OK\"\>", "}"}]}], "}"}]}], ",", 
      RowBox[{"5", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", "2.97058`", "}"}], ",", 
         RowBox[{"{", "\<\"OK\"\>", "}"}]}], "}"}]}]}], 
     "\[RightAssociation]"}]}], ",", 
   RowBox[{"\<\"13\"\>", "\[Rule]", 
    RowBox[{"\[LeftAssociation]", 
     RowBox[{
      RowBox[{"1", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", "2.20956`", "}"}], ",", 
         RowBox[{"{", "\<\"OK\"\>", "}"}]}], "}"}]}], ",", 
      RowBox[{"2", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", "0.147191`", "}"}], ",", 
         RowBox[{"{", "\<\"OK\"\>", "}"}]}], "}"}]}], ",", 
      RowBox[{"3", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", "6.01576`", "}"}], ",", 
         RowBox[{"{", "\<\"OK\"\>", "}"}]}], "}"}]}], ",", 
      RowBox[{"4", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", "0", "}"}], ",", 
         RowBox[{"{", "\<\"OK\"\>", "}"}]}], "}"}]}], ",", 
      RowBox[{"5", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", "97.5729`", "}"}], ",", 
         RowBox[{"{", "\<\"OK\"\>", "}"}]}], "}"}]}]}], 
     "\[RightAssociation]"}]}], ",", 
   RowBox[{"\<\"14\"\>", "\[Rule]", 
    RowBox[{"\[LeftAssociation]", 
     RowBox[{
      RowBox[{"1", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", "0", "}"}], ",", 
         RowBox[{"{", "\<\"OK\"\>", "}"}]}], "}"}]}], ",", 
      RowBox[{"2", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", "8.87452`", "}"}], ",", 
         RowBox[{"{", "\<\"OK\"\>", "}"}]}], "}"}]}], ",", 
      RowBox[{"3", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", "0", "}"}], ",", 
         RowBox[{"{", "\<\"OK\"\>", "}"}]}], "}"}]}], ",", 
      RowBox[{"4", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", "0", "}"}], ",", 
         RowBox[{"{", "\<\"OK\"\>", "}"}]}], "}"}]}], ",", 
      RowBox[{"5", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", "8.27738`", "}"}], ",", 
         RowBox[{"{", "\<\"OK\"\>", "}"}]}], "}"}]}]}], 
     "\[RightAssociation]"}]}], ",", 
   RowBox[{"\<\"15\"\>", "\[Rule]", 
    RowBox[{"\[LeftAssociation]", 
     RowBox[{
      RowBox[{"1", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", "0.67933`", "}"}], ",", 
         RowBox[{"{", "\<\"OK\"\>", "}"}]}], "}"}]}], ",", 
      RowBox[{"2", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", "0", "}"}], ",", 
         RowBox[{"{", "\<\"OK\"\>", "}"}]}], "}"}]}], ",", 
      RowBox[{"3", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", "11.2619`", "}"}], ",", 
         RowBox[{"{", "\<\"OK\"\>", "}"}]}], "}"}]}], ",", 
      RowBox[{"4", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", "23.4358`", "}"}], ",", 
         RowBox[{"{", "\<\"OK\"\>", "}"}]}], "}"}]}], ",", 
      RowBox[{"5", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", "0.100138`", "}"}], ",", 
         RowBox[{"{", "\<\"OK\"\>", "}"}]}], "}"}]}]}], 
     "\[RightAssociation]"}]}], ",", 
   RowBox[{"\<\"16\"\>", "\[Rule]", 
    RowBox[{"\[LeftAssociation]", 
     RowBox[{
      RowBox[{"1", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", "0", "}"}], ",", 
         RowBox[{"{", "\<\"OK\"\>", "}"}]}], "}"}]}], ",", 
      RowBox[{"2", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", "2.80671`", "}"}], ",", 
         RowBox[{"{", "\<\"OK\"\>", "}"}]}], "}"}]}], ",", 
      RowBox[{"3", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", "0.00703911`", "}"}], ",", 
         RowBox[{"{", "\<\"OK\"\>", "}"}]}], "}"}]}], ",", 
      RowBox[{"4", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", "1.62344`", "}"}], ",", 
         RowBox[{"{", "\<\"OK\"\>", "}"}]}], "}"}]}], ",", 
      RowBox[{"5", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", "0", "}"}], ",", 
         RowBox[{"{", "\<\"OK\"\>", "}"}]}], "}"}]}]}], 
     "\[RightAssociation]"}]}], ",", 
   RowBox[{"\<\"17\"\>", "\[Rule]", 
    RowBox[{"\[LeftAssociation]", 
     RowBox[{
      RowBox[{"1", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", "17.1237`", "}"}], ",", 
         RowBox[{"{", "\<\"OK\"\>", "}"}]}], "}"}]}], ",", 
      RowBox[{"2", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", "0.0864652`", "}"}], ",", 
         RowBox[{"{", "\<\"OK\"\>", "}"}]}], "}"}]}], ",", 
      RowBox[{"3", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", "0", "}"}], ",", 
         RowBox[{"{", "\<\"OK\"\>", "}"}]}], "}"}]}], ",", 
      RowBox[{"4", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", "0.0691603`", "}"}], ",", 
         RowBox[{"{", "\<\"OK\"\>", "}"}]}], "}"}]}], ",", 
      RowBox[{"5", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", "7.04913`", "}"}], ",", 
         RowBox[{"{", "\<\"OK\"\>", "}"}]}], "}"}]}]}], 
     "\[RightAssociation]"}]}], ",", 
   RowBox[{"\<\"18\"\>", "\[Rule]", 
    RowBox[{"\[LeftAssociation]", 
     RowBox[{
      RowBox[{"1", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", "2.80942`", "}"}], ",", 
         RowBox[{"{", "\<\"OK\"\>", "}"}]}], "}"}]}], ",", 
      RowBox[{"2", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", "9.15657`", "}"}], ",", 
         RowBox[{"{", "\<\"OK\"\>", "}"}]}], "}"}]}], ",", 
      RowBox[{"3", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", "0.00743612`", "}"}], ",", 
         RowBox[{"{", "\<\"OK\"\>", "}"}]}], "}"}]}], ",", 
      RowBox[{"4", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", "74.1373`", "}"}], ",", 
         RowBox[{"{", "\<\"OK\"\>", "}"}]}], "}"}]}], ",", 
      RowBox[{"5", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", "0", "}"}], ",", 
         RowBox[{"{", "\<\"OK\"\>", "}"}]}], "}"}]}]}], 
     "\[RightAssociation]"}]}], ",", 
   RowBox[{"\<\"19\"\>", "\[Rule]", 
    RowBox[{"\[LeftAssociation]", 
     RowBox[{
      RowBox[{"1", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", "0.713172`", "}"}], ",", 
         RowBox[{"{", "\<\"OK\"\>", "}"}]}], "}"}]}], ",", 
      RowBox[{"2", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", "32.1935`", "}"}], ",", 
         RowBox[{"{", "\<\"OK\"\>", "}"}]}], "}"}]}], ",", 
      RowBox[{"3", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", "12.5973`", "}"}], ",", 
         RowBox[{"{", "\<\"OK\"\>", "}"}]}], "}"}]}], ",", 
      RowBox[{"4", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", "1.74249`", "}"}], ",", 
         RowBox[{"{", "\<\"OK\"\>", "}"}]}], "}"}]}], ",", 
      RowBox[{"5", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", "0.185677`", "}"}], ",", 
         RowBox[{"{", "\<\"OK\"\>", "}"}]}], "}"}]}]}], 
     "\[RightAssociation]"}]}], ",", 
   RowBox[{"\<\"20\"\>", "\[Rule]", 
    RowBox[{"\[LeftAssociation]", 
     RowBox[{
      RowBox[{"1", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", "0", "}"}], ",", 
         RowBox[{"{", "\<\"OK\"\>", "}"}]}], "}"}]}], ",", 
      RowBox[{"2", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", "1.88065`", "}"}], ",", 
         RowBox[{"{", "\<\"OK\"\>", "}"}]}], "}"}]}], ",", 
      RowBox[{"3", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", "0", "}"}], ",", 
         RowBox[{"{", "\<\"OK\"\>", "}"}]}], "}"}]}], ",", 
      RowBox[{"4", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", "0", "}"}], ",", 
         RowBox[{"{", "\<\"OK\"\>", "}"}]}], "}"}]}], ",", 
      RowBox[{"5", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", "0.00354656`", "}"}], ",", 
         RowBox[{"{", "\<\"OK\"\>", "}"}]}], "}"}]}]}], 
     "\[RightAssociation]"}]}], ",", 
   RowBox[{"\<\"21\"\>", "\[Rule]", 
    RowBox[{"\[LeftAssociation]", 
     RowBox[{
      RowBox[{"1", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", "0", "}"}], ",", 
         RowBox[{"{", "\<\"OK\"\>", "}"}]}], "}"}]}], ",", 
      RowBox[{"2", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", "15.6865`", "}"}], ",", 
         RowBox[{"{", "\<\"OK\"\>", "}"}]}], "}"}]}], ",", 
      RowBox[{"3", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", "11.0093`", "}"}], ",", 
         RowBox[{"{", "\<\"OK\"\>", "}"}]}], "}"}]}], ",", 
      RowBox[{"4", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", "1.84931`", "}"}], ",", 
         RowBox[{"{", "\<\"OK\"\>", "}"}]}], "}"}]}], ",", 
      RowBox[{"5", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", "0", "}"}], ",", 
         RowBox[{"{", "\<\"OK\"\>", "}"}]}], "}"}]}]}], 
     "\[RightAssociation]"}]}]}], "\[RightAssociation]"}]], "Output",
 CellLabel->"Out[8]=",
 CellID->1920218630]
}, Open  ]],

Cell["\<\
We do a data cleanup resembling a minimal analysis strategy. First, quantile \
normalization:\
\>", "ExampleText",
 CellID->931937253],

Cell[BoxData[
 RowBox[{
  RowBox[{"bootstrapQNormed", "=", 
   RowBox[{"QuantileNormalization", "[", "bootstrapSets", "]"}]}], 
  ";"}]], "Input",
 CellLabel->"In[9]:=",
 CellID->1536255687],

Cell["We tag low values (<0.1) and filter the data:", "ExampleText",
 CellID->2120845511],

Cell[CellGroupData[{

Cell["bootstrapQNormedTagged=LowValueTag[bootstrapQNormed, 0.1]", "Input",
 CellLabel->"In[11]:=",
 CellID->247413123],

Cell[BoxData[
 InterpretationBox[
  TagBox[
   FrameBox[GridBox[{
      {
       ItemBox[
        TagBox[
         RowBox[{"\[LeftAssociation]", 
          RowBox[{
           RowBox[{"\<\"7\"\>", "\[Rule]", 
            RowBox[{"\[LeftAssociation]", 
             RowBox[{
              RowBox[{"1", "\[Rule]", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{"Missing", "[", "]"}], "}"}], ",", 
                 RowBox[{"{", "\<\"OK\"\>", "}"}]}], "}"}]}], ",", 
              RowBox[{"2", "\[Rule]", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"{", "1.42823`", "}"}], ",", 
                 RowBox[{"{", "\<\"OK\"\>", "}"}]}], "}"}]}], ",", 
              RowBox[{"3", "\[Rule]", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"{", "0.120562`", "}"}], ",", 
                 RowBox[{"{", "\<\"OK\"\>", "}"}]}], "}"}]}], ",", 
              RowBox[{"4", "\[Rule]", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{"Missing", "[", "]"}], "}"}], ",", 
                 RowBox[{"{", "\<\"OK\"\>", "}"}]}], "}"}]}], ",", 
              TemplateBox[{"19992"},
               "OutputSizeLimit`Skeleton",
               DisplayFunction->(FrameBox[
                 
                 RowBox[{
                  "\" \[CenterEllipsis]\"", #, "\"\[CenterEllipsis] \""}], 
                 Background -> GrayLevel[0.75], 
                 BaseStyle -> {
                  "Deploy", FontColor -> GrayLevel[1], FontSize -> Smaller, 
                   ShowStringCharacters -> False}, BaselinePosition -> 
                 Baseline, ContentPadding -> False, FrameMargins -> 1, 
                 FrameStyle -> GrayLevel[0.75], RoundingRadius -> 7]& )], ",", 
              RowBox[{"19997", "\[Rule]", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"{", "2.64426`", "}"}], ",", 
                 RowBox[{"{", "\<\"OK\"\>", "}"}]}], "}"}]}], ",", 
              RowBox[{"19998", "\[Rule]", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{"Missing", "[", "]"}], "}"}], ",", 
                 RowBox[{"{", "\<\"OK\"\>", "}"}]}], "}"}]}], ",", 
              RowBox[{"19999", "\[Rule]", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{"Missing", "[", "]"}], "}"}], ",", 
                 RowBox[{"{", "\<\"OK\"\>", "}"}]}], "}"}]}], ",", 
              RowBox[{"20000", "\[Rule]", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"{", "2.2942`", "}"}], ",", 
                 RowBox[{"{", "\<\"OK\"\>", "}"}]}], "}"}]}]}], 
             "\[RightAssociation]"}]}], ",", 
           TemplateBox[{"13"},
            "OutputSizeLimit`Skeleton",
            DisplayFunction->(FrameBox[
              RowBox[{"\" \[CenterEllipsis]\"", #, "\"\[CenterEllipsis] \""}],
               Background -> GrayLevel[0.75], 
              BaseStyle -> {
               "Deploy", FontColor -> GrayLevel[1], FontSize -> Smaller, 
                ShowStringCharacters -> False}, BaselinePosition -> Baseline, 
              ContentPadding -> False, FrameMargins -> 1, FrameStyle -> 
              GrayLevel[0.75], RoundingRadius -> 7]& )], ",", 
           RowBox[{"\<\"21\"\>", "\[Rule]", 
            RowBox[{"\[LeftAssociation]", 
             TemplateBox[{"1"},
              "OutputSizeLimit`Skeleton",
              DisplayFunction->(FrameBox[
                
                RowBox[{
                 "\" \[CenterEllipsis]\"", #, "\"\[CenterEllipsis] \""}], 
                Background -> GrayLevel[0.75], 
                BaseStyle -> {
                 "Deploy", FontColor -> GrayLevel[1], FontSize -> Smaller, 
                  ShowStringCharacters -> False}, BaselinePosition -> 
                Baseline, ContentPadding -> False, FrameMargins -> 1, 
                FrameStyle -> GrayLevel[0.75], RoundingRadius -> 7]& )], 
             "\[RightAssociation]"}]}]}], "\[RightAssociation]"}],
         Short[#, 5]& ],
        BaseStyle->{Deployed -> False},
        StripOnInput->False]},
      {GridBox[{
         {
          TagBox[
           TooltipBox[
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource[
                "FEStrings", "sizeBriefExplanation"], StandardForm],
               ImageSizeCache->{59., {2., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "SuggestionsBarCategory",
             StripOnInput->False],
            StyleBox[
             DynamicBox[
              ToBoxes[
               FEPrivate`FrontEndResource["FEStrings", "sizeExplanation"], 
               StandardForm]], DynamicUpdating -> True, StripOnInput -> 
             False]],
           Annotation[#, 
            Style[
             Dynamic[
              FEPrivate`FrontEndResource["FEStrings", "sizeExplanation"]], 
             DynamicUpdating -> True], "Tooltip"]& ], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowLess"], 
                StandardForm],
               ImageSizeCache->{51., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "SuggestionsBarControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowLess"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "SuggestionsBarControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            Identity, 11, 32690409551196737160, 5/2],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowMore"], 
                StandardForm],
               ImageSizeCache->{56., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "SuggestionsBarControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowMore"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "SuggestionsBarControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            Identity, 11, 32690409551196737160, 5 2],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowAll"], 
                StandardForm],
               ImageSizeCache->{42., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "SuggestionsBarControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowAll"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "SuggestionsBarControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            Identity, 11, 32690409551196737160, Infinity],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeChangeLimit"], 
                StandardForm],
               ImageSizeCache->{77., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "SuggestionsBarControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeChangeLimit"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "SuggestionsBarControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           ButtonFunction:>FrontEndExecute[{
              FrontEnd`SetOptions[
              FrontEnd`$FrontEnd, 
               FrontEnd`PreferencesSettings -> {"Page" -> "Evaluation"}], 
              FrontEnd`FrontEndToken["PreferencesDialog"]}],
           Evaluator->None,
           Method->"Preemptive"]}
        },
        AutoDelete->False,
        FrameStyle->GrayLevel[0.85],
        GridBoxDividers->{"Columns" -> {False, {True}}},
        GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
        GridBoxSpacings->{"Columns" -> {{2}}}]}
     },
     DefaultBaseStyle->"Column",
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}},
     GridBoxDividers->{
      "Columns" -> {{False}}, "ColumnsIndexed" -> {}, "Rows" -> {{False}}, 
       "RowsIndexed" -> {}},
     GridBoxItemSize->{
      "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
       "RowsIndexed" -> {}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.5599999999999999]}, 
         Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
         Offset[0.2], 
         Offset[1.2], {
          Offset[0.4]}, 
         Offset[0.2]}, "RowsIndexed" -> {}}],
    Background->RGBColor[0.9657, 0.9753, 0.9802],
    FrameMargins->{{12, 12}, {0, 15}},
    FrameStyle->GrayLevel[0.85],
    RoundingRadius->5,
    StripOnInput->False],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  Out[11]]], "Output",
 CellLabel->"Out[11]=",
 CellID->1294413341]
}, Open  ]],

Cell["\<\
We next also tag noisy values (< 5) and replacement by a low default (1) :\
\>", "ExampleText",
 CellID->990347941],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"bootstrapQNormedTaggedFilter", " ", "=", " ", 
  RowBox[{"LowValueTag", "[", 
   RowBox[{"bootstrapQNormedTagged", ",", "5", ",", " ", 
    RowBox[{"ValueReplacement", "\[Rule]", " ", "1"}]}], "]"}]}]], "Input",
 CellLabel->"In[12]:=",
 CellID->1212756079],

Cell[BoxData[
 InterpretationBox[
  TagBox[
   FrameBox[GridBox[{
      {
       ItemBox[
        TagBox[
         RowBox[{"\[LeftAssociation]", 
          RowBox[{
           RowBox[{"\<\"7\"\>", "\[Rule]", 
            RowBox[{"\[LeftAssociation]", 
             RowBox[{
              RowBox[{"1", "\[Rule]", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{"Missing", "[", "]"}], "}"}], ",", 
                 RowBox[{"{", "\<\"OK\"\>", "}"}]}], "}"}]}], ",", 
              RowBox[{"2", "\[Rule]", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"{", "1", "}"}], ",", 
                 RowBox[{"{", "\<\"OK\"\>", "}"}]}], "}"}]}], ",", 
              RowBox[{"3", "\[Rule]", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"{", "1", "}"}], ",", 
                 RowBox[{"{", "\<\"OK\"\>", "}"}]}], "}"}]}], ",", 
              RowBox[{"4", "\[Rule]", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{"Missing", "[", "]"}], "}"}], ",", 
                 RowBox[{"{", "\<\"OK\"\>", "}"}]}], "}"}]}], ",", 
              RowBox[{"5", "\[Rule]", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"{", "35.8455`", "}"}], ",", 
                 RowBox[{"{", "\<\"OK\"\>", "}"}]}], "}"}]}], ",", 
              TemplateBox[{"19991"},
               "OutputSizeLimit`Skeleton",
               DisplayFunction->(FrameBox[
                 
                 RowBox[{
                  "\" \[CenterEllipsis]\"", #, "\"\[CenterEllipsis] \""}], 
                 Background -> GrayLevel[0.75], 
                 BaseStyle -> {
                  "Deploy", FontColor -> GrayLevel[1], FontSize -> Smaller, 
                   ShowStringCharacters -> False}, BaselinePosition -> 
                 Baseline, ContentPadding -> False, FrameMargins -> 1, 
                 FrameStyle -> GrayLevel[0.75], RoundingRadius -> 7]& )], ",", 
              RowBox[{"19997", "\[Rule]", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"{", "1", "}"}], ",", 
                 RowBox[{"{", "\<\"OK\"\>", "}"}]}], "}"}]}], ",", 
              RowBox[{"19998", "\[Rule]", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{"Missing", "[", "]"}], "}"}], ",", 
                 RowBox[{"{", "\<\"OK\"\>", "}"}]}], "}"}]}], ",", 
              RowBox[{"19999", "\[Rule]", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{"Missing", "[", "]"}], "}"}], ",", 
                 RowBox[{"{", "\<\"OK\"\>", "}"}]}], "}"}]}], ",", 
              RowBox[{"20000", "\[Rule]", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"{", "1", "}"}], ",", 
                 RowBox[{"{", "\<\"OK\"\>", "}"}]}], "}"}]}]}], 
             "\[RightAssociation]"}]}], ",", 
           TemplateBox[{"13"},
            "OutputSizeLimit`Skeleton",
            DisplayFunction->(FrameBox[
              RowBox[{"\" \[CenterEllipsis]\"", #, "\"\[CenterEllipsis] \""}],
               Background -> GrayLevel[0.75], 
              BaseStyle -> {
               "Deploy", FontColor -> GrayLevel[1], FontSize -> Smaller, 
                ShowStringCharacters -> False}, BaselinePosition -> Baseline, 
              ContentPadding -> False, FrameMargins -> 1, FrameStyle -> 
              GrayLevel[0.75], RoundingRadius -> 7]& )], ",", 
           RowBox[{"\<\"21\"\>", "\[Rule]", 
            RowBox[{"\[LeftAssociation]", 
             TemplateBox[{"1"},
              "OutputSizeLimit`Skeleton",
              DisplayFunction->(FrameBox[
                
                RowBox[{
                 "\" \[CenterEllipsis]\"", #, "\"\[CenterEllipsis] \""}], 
                Background -> GrayLevel[0.75], 
                BaseStyle -> {
                 "Deploy", FontColor -> GrayLevel[1], FontSize -> Smaller, 
                  ShowStringCharacters -> False}, BaselinePosition -> 
                Baseline, ContentPadding -> False, FrameMargins -> 1, 
                FrameStyle -> GrayLevel[0.75], RoundingRadius -> 7]& )], 
             "\[RightAssociation]"}]}]}], "\[RightAssociation]"}],
         Short[#, 5]& ],
        BaseStyle->{Deployed -> False},
        StripOnInput->False]},
      {GridBox[{
         {
          TagBox[
           TooltipBox[
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource[
                "FEStrings", "sizeBriefExplanation"], StandardForm],
               ImageSizeCache->{59., {2., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "SuggestionsBarCategory",
             StripOnInput->False],
            StyleBox[
             DynamicBox[
              ToBoxes[
               FEPrivate`FrontEndResource["FEStrings", "sizeExplanation"], 
               StandardForm]], DynamicUpdating -> True, StripOnInput -> 
             False]],
           Annotation[#, 
            Style[
             Dynamic[
              FEPrivate`FrontEndResource["FEStrings", "sizeExplanation"]], 
             DynamicUpdating -> True], "Tooltip"]& ], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowLess"], 
                StandardForm],
               ImageSizeCache->{51., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "SuggestionsBarControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowLess"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "SuggestionsBarControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            Identity, 12, 32690409551196737160, 5/2],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowMore"], 
                StandardForm],
               ImageSizeCache->{56., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "SuggestionsBarControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowMore"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "SuggestionsBarControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            Identity, 12, 32690409551196737160, 5 2],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowAll"], 
                StandardForm],
               ImageSizeCache->{42., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "SuggestionsBarControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowAll"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "SuggestionsBarControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            Identity, 12, 32690409551196737160, Infinity],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeChangeLimit"], 
                StandardForm],
               ImageSizeCache->{77., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "SuggestionsBarControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeChangeLimit"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "SuggestionsBarControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           ButtonFunction:>FrontEndExecute[{
              FrontEnd`SetOptions[
              FrontEnd`$FrontEnd, 
               FrontEnd`PreferencesSettings -> {"Page" -> "Evaluation"}], 
              FrontEnd`FrontEndToken["PreferencesDialog"]}],
           Evaluator->None,
           Method->"Preemptive"]}
        },
        AutoDelete->False,
        FrameStyle->GrayLevel[0.85],
        GridBoxDividers->{"Columns" -> {False, {True}}},
        GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
        GridBoxSpacings->{"Columns" -> {{2}}}]}
     },
     DefaultBaseStyle->"Column",
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}},
     GridBoxDividers->{
      "Columns" -> {{False}}, "ColumnsIndexed" -> {}, "Rows" -> {{False}}, 
       "RowsIndexed" -> {}},
     GridBoxItemSize->{
      "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
       "RowsIndexed" -> {}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.5599999999999999]}, 
         Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
         Offset[0.2], 
         Offset[1.2], {
          Offset[0.4]}, 
         Offset[0.2]}, "RowsIndexed" -> {}}],
    Background->RGBColor[0.9657, 0.9753, 0.9802],
    FrameMargins->{{12, 12}, {0, 15}},
    FrameStyle->GrayLevel[0.85],
    RoundingRadius->5,
    StripOnInput->False],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  Out[12]]], "Output",
 CellLabel->"Out[12]=",
 CellID->1756955160]
}, Open  ]],

Cell["\<\
We filter series to have at least 3/4 of their timepoints and exclude data \
for which the reference point \"8\" is missing:\
\>", "ExampleText",
 CellID->442464879],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"bootstrapFiltered", "=", 
   RowBox[{"FilterMissing", "[", 
    RowBox[{"bootstrapQNormedTaggedFilter", ",", 
     RowBox[{"3", "/", "4"}], ",", 
     RowBox[{"Reference", "\[Rule]", " ", "\"\<8\>\""}]}], "]"}]}], 
  ";"}]], "Input",
 CellLabel->"In[13]:=",
 CellID->430930498],

Cell[CellGroupData[{

Cell[BoxData[
 GraphicsBox[{
   {RGBColor[0.987148, 0.8073604000000001, 0.49470040000000004`], EdgeForm[{
    Opacity[0.574], Thickness[Small]}], {}, 
    {RGBColor[0.987148, 0.8073604000000001, 0.49470040000000004`], EdgeForm[{
     Opacity[0.574], Thickness[Small]}], 
     TagBox[
      TooltipBox[
       TagBox[
        DynamicBox[{
          FEPrivate`If[
           CurrentValue["MouseOver"], 
           EdgeForm[{
             GrayLevel[0.5], 
             AbsoluteThickness[1.5], 
             Opacity[0.66]}], {}, {}], 
          RectangleBox[{0., 0}, {1., 3}, "RoundingRadius" -> 0]},
         ImageSizeCache->{{41.395316253002406`, 54.50540432345878}, {
          69.95125078027428, 70.54322946830301}}],
        StatusArea[#, 3]& ,
        TagBoxNote->"3"],
       StyleBox["3", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[3, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        DynamicBox[{
          FEPrivate`If[
           CurrentValue["MouseOver"], 
           EdgeForm[{
             GrayLevel[0.5], 
             AbsoluteThickness[1.5], 
             Opacity[0.66]}], {}, {}], 
          RectangleBox[{1., 0}, {2., 27}, "RoundingRadius" -> 0]},
         ImageSizeCache->{{54.00540432345878, 67.11549239391513}, {
          69.21542127604437, 70.54322946830301}}],
        StatusArea[#, 27]& ,
        TagBoxNote->"27"],
       StyleBox["27", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[27, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        DynamicBox[{
          FEPrivate`If[
           CurrentValue["MouseOver"], 
           EdgeForm[{
             GrayLevel[0.5], 
             AbsoluteThickness[1.5], 
             Opacity[0.66]}], {}, {}], 
          RectangleBox[{2., 0}, {3., 197}, "RoundingRadius" -> 0]},
         ImageSizeCache->{{66.61549239391513, 79.7255804643715}, {
          64.00329562108251, 70.54322946830301}}],
        StatusArea[#, 197]& ,
        TagBoxNote->"197"],
       StyleBox["197", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[197, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        DynamicBox[{
          FEPrivate`If[
           CurrentValue["MouseOver"], 
           EdgeForm[{
             GrayLevel[0.5], 
             AbsoluteThickness[1.5], 
             Opacity[0.66]}], {}, {}], 
          RectangleBox[{3., 0}, {4., 655}, "RoundingRadius" -> 0]},
         ImageSizeCache->{{79.2255804643715, 92.33566853482787}, {
          49.961215915361755`, 70.54322946830301}}],
        StatusArea[#, 655]& ,
        TagBoxNote->"655"],
       StyleBox["655", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[655, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        DynamicBox[{
          FEPrivate`If[
           CurrentValue["MouseOver"], 
           EdgeForm[{
             GrayLevel[0.5], 
             AbsoluteThickness[1.5], 
             Opacity[0.66]}], {}, {}], 
          RectangleBox[{4., 0}, {5., 1664}, "RoundingRadius" -> 0]},
         ImageSizeCache->{{91.83566853482787, 104.94575660528425`}, {
          19.02571717502935, 70.54322946830301}}],
        StatusArea[#, 1664]& ,
        TagBoxNote->"1664"],
       StyleBox["1664", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[1664, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        DynamicBox[{
          FEPrivate`If[
           CurrentValue["MouseOver"], 
           EdgeForm[{
             GrayLevel[0.5], 
             AbsoluteThickness[1.5], 
             Opacity[0.66]}], {}, {}], 
          RectangleBox[{5., 0}, {6., 2939}, "RoundingRadius" -> 0]},
         ImageSizeCache->{{104.44575660528425`, 
          117.5558446757406}, {-20.065225237184535`, 70.54322946830301}}],
        StatusArea[#, 2939]& ,
        TagBoxNote->"2939"],
       StyleBox["2939", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[2939, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        DynamicBox[{
          FEPrivate`If[
           CurrentValue["MouseOver"], 
           EdgeForm[{
             GrayLevel[0.5], 
             AbsoluteThickness[1.5], 
             Opacity[0.66]}], {}, {}], 
          RectangleBox[{6., 0}, {7., 3882}, "RoundingRadius" -> 0]},
         ImageSizeCache->{{117.0558446757406, 
          130.16593274619697`}, {-48.9771928408847, 70.54322946830301}}],
        StatusArea[#, 3882]& ,
        TagBoxNote->"3882"],
       StyleBox["3882", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[3882, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        DynamicBox[{
          FEPrivate`If[
           CurrentValue["MouseOver"], 
           EdgeForm[{
             GrayLevel[0.5], 
             AbsoluteThickness[1.5], 
             Opacity[0.66]}], {}, {}], 
          RectangleBox[{7., 0}, {8., 3940}, "RoundingRadius" -> 0]},
         ImageSizeCache->{{129.66593274619697`, 
          142.77602081665333`}, {-50.75544747610698, 70.54322946830301}}],
        StatusArea[#, 3940]& ,
        TagBoxNote->"3940"],
       StyleBox["3940", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[3940, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        DynamicBox[{
          FEPrivate`If[
           CurrentValue["MouseOver"], 
           EdgeForm[{
             GrayLevel[0.5], 
             AbsoluteThickness[1.5], 
             Opacity[0.66]}], {}, {}], 
          RectangleBox[{8., 0}, {9., 3281}, "RoundingRadius" -> 0]},
         ImageSizeCache->{{142.27602081665333`, 
          155.3861088871097}, {-30.550795672460737`, 70.54322946830301}}],
        StatusArea[#, 3281]& ,
        TagBoxNote->"3281"],
       StyleBox["3281", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[3281, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        DynamicBox[{
          FEPrivate`If[
           CurrentValue["MouseOver"], 
           EdgeForm[{
             GrayLevel[0.5], 
             AbsoluteThickness[1.5], 
             Opacity[0.66]}], {}, {}], 
          RectangleBox[{9., 0}, {10., 1989}, "RoundingRadius" -> 0]},
         ImageSizeCache->{{154.8861088871097, 167.9961969575661}, {
          9.06135930524934, 70.54322946830301}}],
        StatusArea[#, 1989]& ,
        TagBoxNote->"1989"],
       StyleBox["1989", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[1989, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        DynamicBox[{
          FEPrivate`If[
           CurrentValue["MouseOver"], 
           EdgeForm[{
             GrayLevel[0.5], 
             AbsoluteThickness[1.5], 
             Opacity[0.66]}], {}, {}], 
          RectangleBox[{10., 0}, {11., 951}, "RoundingRadius" -> 0]},
         ImageSizeCache->{{167.4961969575661, 180.60628502802246`}, {
          40.88598536319289, 70.54322946830301}}],
        StatusArea[#, 951]& ,
        TagBoxNote->"951"],
       StyleBox["951", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[951, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        DynamicBox[{
          FEPrivate`If[
           CurrentValue["MouseOver"], 
           EdgeForm[{
             GrayLevel[0.5], 
             AbsoluteThickness[1.5], 
             Opacity[0.66]}], {}, {}], 
          RectangleBox[{11., 0}, {12., 385}, "RoundingRadius" -> 0]},
         ImageSizeCache->{{180.10628502802246`, 193.2163730984788}, {
          58.23929783794823, 70.54322946830301}}],
        StatusArea[#, 385]& ,
        TagBoxNote->"385"],
       StyleBox["385", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[385, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        DynamicBox[{
          FEPrivate`If[
           CurrentValue["MouseOver"], 
           EdgeForm[{
             GrayLevel[0.5], 
             AbsoluteThickness[1.5], 
             Opacity[0.66]}], {}, {}], 
          RectangleBox[{12., 0}, {13., 67}, "RoundingRadius" -> 0]},
         ImageSizeCache->{{192.7163730984788, 205.82646116893517`}, {
          67.98903876899452, 70.54322946830301}}],
        StatusArea[#, 67]& ,
        TagBoxNote->"67"],
       StyleBox["67", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[67, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        DynamicBox[{
          FEPrivate`If[
           CurrentValue["MouseOver"], 
           EdgeForm[{
             GrayLevel[0.5], 
             AbsoluteThickness[1.5], 
             Opacity[0.66]}], {}, {}], 
          RectangleBox[{13., 0}, {14., 19}, "RoundingRadius" -> 0]},
         ImageSizeCache->{{205.32646116893517`, 218.43654923939152`}, {
          69.46069777745433, 70.54322946830301}}],
        StatusArea[#, 19]& ,
        TagBoxNote->"19"],
       StyleBox["19", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[19, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        DynamicBox[{
          FEPrivate`If[
           CurrentValue["MouseOver"], 
           EdgeForm[{
             GrayLevel[0.5], 
             AbsoluteThickness[1.5], 
             Opacity[0.66]}], {}, {}], 
          RectangleBox[{14., 0}, {15., 1}, "RoundingRadius" -> 0]},
         ImageSizeCache->{{217.93654923939152`, 231.04663730984794`}, {
          70.01256990562676, 70.54322946830301}}],
        StatusArea[#, 1]& ,
        TagBoxNote->"1"],
       StyleBox["1", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[1, {}], 
       "Tooltip"]& ]}, {}, {}}, {{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{
    FormBox["\"Number of Missing Points\"", TraditionalForm], 
    FormBox["\"Counts\"", TraditionalForm]},
  AxesOrigin->{-1.32, 0},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImageSize->Medium,
  PlotLabel->FormBox[
   "\"Number of Missing Data Points per Component\"", TraditionalForm],
  PlotRange->{{-1., 15.}, {All, All}},
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Print",
 CellLabel->"During evaluation of In[13]:=",
 CellID->2004056391],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"Missing -> Counts: \"\>", ",", 
   RowBox[{"\[LeftAssociation]", 
    RowBox[{
     RowBox[{"0", "\[Rule]", "3"}], ",", 
     RowBox[{"1", "\[Rule]", "27"}], ",", 
     RowBox[{"2", "\[Rule]", "197"}], ",", 
     RowBox[{"3", "\[Rule]", "655"}], ",", 
     RowBox[{"4", "\[Rule]", "1664"}], ",", 
     RowBox[{"5", "\[Rule]", "2939"}], ",", 
     RowBox[{"6", "\[Rule]", "3882"}], ",", 
     RowBox[{"7", "\[Rule]", "3940"}], ",", 
     RowBox[{"8", "\[Rule]", "3281"}], ",", 
     RowBox[{"9", "\[Rule]", "1989"}], ",", 
     RowBox[{"10", "\[Rule]", "951"}], ",", 
     RowBox[{"11", "\[Rule]", "385"}], ",", 
     RowBox[{"12", "\[Rule]", "67"}], ",", 
     RowBox[{"13", "\[Rule]", "19"}], ",", 
     RowBox[{"14", "\[Rule]", "1"}]}], "\[RightAssociation]"}]}], 
  "}"}]], "Print",
 CellLabel->"During evaluation of In[13]:=",
 CellID->1042243989],

Cell[BoxData[
 TemplateBox[{
   GraphicsBox[{{}, {}, 
     DynamicModuleBox[{
      DynamicChart`click$3033$3302 = False, DynamicChart`click$3041$3302 = 
       False, DynamicChart`click$3046$3302 = False, 
       DynamicChart`click$3051$3302 = False, DynamicChart`click$3056$3302 = 
       False, DynamicChart`click$3061$3302 = False, 
       DynamicChart`click$3066$3302 = False, DynamicChart`click$3071$3302 = 
       False, DynamicChart`click$3076$3302 = False, 
       DynamicChart`click$3081$3302 = False, DynamicChart`click$3086$3302 = 
       False, DynamicChart`click$3091$3302 = False, 
       DynamicChart`click$3096$3302 = False, DynamicChart`click$3101$3302 = 
       False, DynamicChart`click$3106$3302 = False}, {{
        Directive[
         RGBColor[0.5, 0.5, 1.], 
         EdgeForm[
          Directive[
           GrayLevel[0], 
           Opacity[0.5]]]], {{{{{{}, {{
               Directive[
                EdgeForm[
                 Directive[
                  GrayLevel[0], 
                  Opacity[0.5]]], 
                RGBColor[0.982864, 0.7431472, 0.3262672]], 
               GeometricTransformationBox[
                TagBox[
                 TagBox[
                  TooltipBox[
                   TagBox[{
                    DynamicBox[{
                    FEPrivate`If[
                    CurrentValue["MouseOver"], 
                    EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[2.5], 
                    Opacity[0.66]}], {}, {}], 
                    
                    DiskBox[{0, 0}, 1., {3.140650175793716, 
                    3.141592653589793}]}], {}}, StatusArea[#, 3]& , 
                    TagBoxNote -> "3"], 
                   StyleBox["3", {
                    GrayLevel[0], FontFamily -> "Arial"}, StripOnInput -> 
                    False]], Annotation[#, 
                   Style[3, {
                    GrayLevel[0], FontFamily -> "Arial"}], "Tooltip"]& ], 
                 
                 EventHandlerTag[{
                  "MouseClicked" :> 
                   FEPrivate`Set[DynamicChart`click$3033$3302, 
                    FEPrivate`Not[DynamicChart`click$3033$3302]], 
                   PassEventsDown -> True, Method -> "Preemptive", 
                   PassEventsUp -> True}]], 
                Dynamic[
                 If[
                 DynamicChart`click$3033$3302, {{{1., 0}, {
                    0, 1.}}, {-0.19999997779339052`, 
                   0.00009424777611948858}}, {{1, 0}, {0, 1}}, {{1, 0}, {0, 
                  1}}], TrackedSymbols :> {DynamicChart`click$3033$3302}]]}, {
              
               Directive[
                EdgeForm[
                 Directive[
                  GrayLevel[0], 
                  Opacity[0.5]]], 
                RGBColor[0.98776, 0.686248, 0.29019085714285714`]], 
               GeometricTransformationBox[
                TagBox[
                 TagBox[
                  TooltipBox[
                   TagBox[{
                    DynamicBox[{
                    FEPrivate`If[
                    CurrentValue["MouseOver"], 
                    EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[2.5], 
                    Opacity[0.66]}], {}, {}], 
                    
                    DiskBox[{0, 0}, 1., {3.132167875629024, 
                    3.140650175793716}]}], {}}, StatusArea[#, 27]& , 
                    TagBoxNote -> "27"], 
                   StyleBox["27", {
                    GrayLevel[0], FontFamily -> "Arial"}, StripOnInput -> 
                    False]], Annotation[#, 
                   Style[27, {
                    GrayLevel[0], FontFamily -> "Arial"}], "Tooltip"]& ], 
                 
                 EventHandlerTag[{
                  "MouseClicked" :> 
                   FEPrivate`Set[DynamicChart`click$3041$3302, 
                    FEPrivate`Not[DynamicChart`click$3041$3302]], 
                   PassEventsDown -> True, Method -> "Preemptive", 
                   PassEventsUp -> True}]], 
                Dynamic[
                 If[
                 DynamicChart`click$3041$3302, {{{1., 0}, {
                    0, 1.}}, {-0.19999731300621845`, 
                   0.001036720932888546}}, {{1, 0}, {0, 1}}, {{1, 0}, {0, 
                  1}}], TrackedSymbols :> {DynamicChart`click$3041$3302}]]}, {
              
               Directive[
                EdgeForm[
                 Directive[
                  GrayLevel[0], 
                  Opacity[0.5]]], 
                RGBColor[0.992656, 0.6293488, 0.2541145142857143]], 
               GeometricTransformationBox[
                TagBox[
                 TagBox[
                  TooltipBox[
                   TagBox[{
                    DynamicBox[{
                    FEPrivate`If[
                    CurrentValue["MouseOver"], 
                    EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[2.5], 
                    Opacity[0.66]}], {}, {}], 
                    
                    DiskBox[{0, 0}, 1., {3.0702785003533046`, 
                    3.132167875629024}]}], {}}, StatusArea[#, 197]& , 
                    TagBoxNote -> "197"], 
                   StyleBox["197", {
                    GrayLevel[0], FontFamily -> "Arial"}, StripOnInput -> 
                    False]], Annotation[#, 
                   Style[197, {
                    GrayLevel[0], FontFamily -> "Arial"}], "Tooltip"]& ], 
                 
                 EventHandlerTag[{
                  "MouseClicked" :> 
                   FEPrivate`Set[DynamicChart`click$3046$3302, 
                    FEPrivate`Not[DynamicChart`click$3046$3302]], 
                   PassEventsDown -> True, Method -> "Preemptive", 
                   PassEventsUp -> True}]], 
                Dynamic[
                 If[
                 DynamicChart`click$3046$3302, {{{1., 0}, {
                    0, 1.}}, {-0.19983705275604025`, 
                   0.008071700302884907}}, {{1, 0}, {0, 1}}, {{1, 0}, {0, 
                  1}}], TrackedSymbols :> {DynamicChart`click$3046$3302}]]}, {
              
               Directive[
                EdgeForm[
                 Directive[
                  GrayLevel[0], 
                  Opacity[0.5]]], 
                RGBColor[0.997552, 0.5724496, 0.21803817142857146`]], 
               GeometricTransformationBox[
                TagBox[
                 TagBox[
                  TooltipBox[
                   TagBox[{
                    DynamicBox[{
                    FEPrivate`If[
                    CurrentValue["MouseOver"], 
                    EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[2.5], 
                    Opacity[0.66]}], {}, {}], 
                    
                    DiskBox[{0, 0}, 1., {2.8645041815431735`, 
                    3.0702785003533046`}]}], {}}, StatusArea[#, 655]& , 
                    TagBoxNote -> "655"], 
                   StyleBox["655", {
                    GrayLevel[0], FontFamily -> "Arial"}, StripOnInput -> 
                    False]], Annotation[#, 
                   Style[655, {
                    GrayLevel[0], FontFamily -> "Arial"}], "Tooltip"]& ], 
                 
                 EventHandlerTag[{
                  "MouseClicked" :> 
                   FEPrivate`Set[DynamicChart`click$3051$3302, 
                    FEPrivate`Not[DynamicChart`click$3051$3302]], 
                   PassEventsDown -> True, Method -> "Preemptive", 
                   PassEventsUp -> True}]], 
                Dynamic[
                 If[
                 DynamicChart`click$3051$3302, {{{1., 0}, {
                    0, 1.}}, {-0.19697305655587963`, 
                   0.034664318701429137`}}, {{1, 0}, {0, 1}}, {{1, 0}, {0, 
                  1}}], TrackedSymbols :> {DynamicChart`click$3051$3302}]]}, {
              
               Directive[
                EdgeForm[
                 Directive[
                  GrayLevel[0], 
                  Opacity[0.5]]], 
                RGBColor[0.9691428571428572, 0.5341714285714286, 0.2]], 
               GeometricTransformationBox[
                TagBox[
                 TagBox[
                  TooltipBox[
                   TagBox[{
                    DynamicBox[{
                    FEPrivate`If[
                    CurrentValue["MouseOver"], 
                    EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[2.5], 
                    Opacity[0.66]}], {}, {}], 
                    
                    DiskBox[{0, 0}, 1., {2.3417431639858317`, 
                    2.8645041815431735`}]}], {}}, StatusArea[#, 1664]& , 
                    TagBoxNote -> "1664"], 
                   StyleBox["1664", {
                    GrayLevel[0], FontFamily -> "Arial"}, StripOnInput -> 
                    False]], Annotation[#, 
                   Style[1664, {
                    GrayLevel[0], FontFamily -> "Arial"}], "Tooltip"]& ], 
                 
                 EventHandlerTag[{
                  "MouseClicked" :> 
                   FEPrivate`Set[DynamicChart`click$3056$3302, 
                    FEPrivate`Not[DynamicChart`click$3056$3302]], 
                   PassEventsDown -> True, Method -> "Preemptive", 
                   PassEventsUp -> True}]], 
                Dynamic[
                 If[
                 DynamicChart`click$3056$3302, {{{1., 0}, {
                    0, 1.}}, {-0.1716989655750209, 0.10256444423126268`}}, {{
                  1, 0}, {0, 1}}, {{1, 0}, {0, 1}}], 
                 TrackedSymbols :> {DynamicChart`click$3056$3302}]]}, {
               Directive[
                EdgeForm[
                 Directive[
                  GrayLevel[0], 
                  Opacity[0.5]]], 
                RGBColor[0.9074285714285715, 0.5145142857142857, 0.2]], 
               GeometricTransformationBox[
                TagBox[
                 TagBox[
                  TooltipBox[
                   TagBox[{
                    DynamicBox[{
                    FEPrivate`If[
                    CurrentValue["MouseOver"], 
                    EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[2.5], 
                    Opacity[0.66]}], {}, {}], 
                    
                    DiskBox[{0, 0}, 1., {1.4184290830957915`, 
                    2.3417431639858317`}]}], {}}, StatusArea[#, 2939]& , 
                    TagBoxNote -> "2939"], 
                   StyleBox["2939", {
                    GrayLevel[0], FontFamily -> "Arial"}, StripOnInput -> 
                    False]], Annotation[#, 
                   Style[2939, {
                    GrayLevel[0], FontFamily -> "Arial"}], "Tooltip"]& ], 
                 
                 EventHandlerTag[{
                  "MouseClicked" :> 
                   FEPrivate`Set[DynamicChart`click$3061$3302, 
                    FEPrivate`Not[DynamicChart`click$3061$3302]], 
                   PassEventsDown -> True, Method -> "Preemptive", 
                   PassEventsUp -> True}]], 
                Dynamic[
                 If[
                 DynamicChart`click$3061$3302, {{{1., 0}, {
                    0, 1.}}, {-0.060876441833187626`, 
                   0.19050999666613436`}}, {{1, 0}, {0, 1}}, {{1, 0}, {0, 
                  1}}], TrackedSymbols :> {DynamicChart`click$3061$3302}]]}, {
              
               Directive[
                EdgeForm[
                 Directive[
                  GrayLevel[0], 
                  Opacity[0.5]]], 
                RGBColor[0.8457142857142858, 0.49485714285714283`, 0.2]], 
               GeometricTransformationBox[
                TagBox[
                 TagBox[
                  TooltipBox[
                   TagBox[{
                    DynamicBox[{
                    FEPrivate`If[
                    CurrentValue["MouseOver"], 
                    EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[2.5], 
                    Opacity[0.66]}], {}, {}], 
                    
                    DiskBox[{0, 0}, 1., {0.1988628149722338, 
                    1.4184290830957915`}]}], {}}, StatusArea[#, 3882]& , 
                    TagBoxNote -> "3882"], 
                   StyleBox["3882", {
                    GrayLevel[0], FontFamily -> "Arial"}, StripOnInput -> 
                    False]], Annotation[#, 
                   Style[3882, {
                    GrayLevel[0], FontFamily -> "Arial"}], "Tooltip"]& ], 
                 
                 EventHandlerTag[{
                  "MouseClicked" :> 
                   FEPrivate`Set[DynamicChart`click$3066$3302, 
                    FEPrivate`Not[DynamicChart`click$3066$3302]], 
                   PassEventsDown -> True, Method -> "Preemptive", 
                   PassEventsUp -> True}]], 
                Dynamic[
                 If[
                 DynamicChart`click$3066$3302, {{{1., 0}, {0, 1.}}, {
                   0.13809570446368616`, 0.1446705789325468}}, {{1, 0}, {0, 
                  1}}, {{1, 0}, {0, 1}}], 
                 TrackedSymbols :> {DynamicChart`click$3066$3302}]]}, {
               Directive[
                EdgeForm[
                 Directive[
                  GrayLevel[0], 
                  Opacity[0.5]]], 
                RGBColor[0.784, 0.47519999999999996`, 0.2]], 
               GeometricTransformationBox[
                TagBox[
                 TagBox[
                  TooltipBox[
                   TagBox[{
                    DynamicBox[{
                    FEPrivate`If[
                    CurrentValue["MouseOver"], 
                    EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[2.5], 
                    Opacity[0.66]}], {}, {}], 
                    
                    DiskBox[{0, 0}, 1., {-1.038924690542145, 
                    0.1988628149722338}]}], {}}, StatusArea[#, 3940]& , 
                    TagBoxNote -> "3940"], 
                   StyleBox["3940", {
                    GrayLevel[0], FontFamily -> "Arial"}, StripOnInput -> 
                    False]], Annotation[#, 
                   Style[3940, {
                    GrayLevel[0], FontFamily -> "Arial"}], "Tooltip"]& ], 
                 
                 EventHandlerTag[{
                  "MouseClicked" :> 
                   FEPrivate`Set[DynamicChart`click$3071$3302, 
                    FEPrivate`Not[DynamicChart`click$3071$3302]], 
                   PassEventsDown -> True, Method -> "Preemptive", 
                   PassEventsUp -> True}]], 
                Dynamic[
                 If[
                 DynamicChart`click$3071$3302, {{{1., 0}, {0, 1.}}, {
                   0.18261526493402402`, -0.08155774036274063}}, {{1, 0}, {0, 
                  1}}, {{1, 0}, {0, 1}}], 
                 TrackedSymbols :> {DynamicChart`click$3071$3302}]]}, {
               Directive[
                EdgeForm[
                 Directive[
                  GrayLevel[0], 
                  Opacity[0.5]]], 
                RGBColor[
                0.7529888, 0.4779428571428571, 0.34927977142857136`]], 
               GeometricTransformationBox[
                TagBox[
                 TagBox[
                  TooltipBox[
                   TagBox[{
                    DynamicBox[{
                    FEPrivate`If[
                    CurrentValue["MouseOver"], 
                    EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[2.5], 
                    Opacity[0.66]}], {}, {}], 
                    
                    DiskBox[{0, 0}, 
                    1., {-2.0696812401849556`, -1.038924690542145}]}], {}}, 
                    StatusArea[#, 3281]& , TagBoxNote -> "3281"], 
                   StyleBox["3281", {
                    GrayLevel[0], FontFamily -> "Arial"}, StripOnInput -> 
                    False]], Annotation[#, 
                   Style[3281, {
                    GrayLevel[0], FontFamily -> "Arial"}], "Tooltip"]& ], 
                 
                 EventHandlerTag[{
                  "MouseClicked" :> 
                   FEPrivate`Set[DynamicChart`click$3076$3302, 
                    FEPrivate`Not[DynamicChart`click$3076$3302]], 
                   PassEventsDown -> True, Method -> "Preemptive", 
                   PassEventsUp -> True}]], 
                Dynamic[
                 If[
                 DynamicChart`click$3076$3302, {{{1., 0}, {0, 1.}}, {
                   0.003298522731465784, -0.19997279751953767`}}, {{1, 0}, {0,
                   1}}, {{1, 0}, {0, 1}}], 
                 TrackedSymbols :> {DynamicChart`click$3076$3302}]]}, {
               Directive[
                EdgeForm[
                 Directive[
                  GrayLevel[0], 
                  Opacity[0.5]]], 
                RGBColor[
                0.7219776, 0.48068571428571427`, 0.49855954285714277`]], 
               GeometricTransformationBox[
                TagBox[
                 TagBox[
                  TooltipBox[
                   TagBox[{
                    DynamicBox[{
                    FEPrivate`If[
                    CurrentValue["MouseOver"], 
                    EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[2.5], 
                    Opacity[0.66]}], {}, {}], 
                    
                    DiskBox[{0, 0}, 
                    1., {-2.694544018983966, -2.0696812401849556`}]}], {}}, 
                    StatusArea[#, 1989]& , TagBoxNote -> "1989"], 
                   StyleBox["1989", {
                    GrayLevel[0], FontFamily -> "Arial"}, StripOnInput -> 
                    False]], Annotation[#, 
                   Style[1989, {
                    GrayLevel[0], FontFamily -> "Arial"}], "Tooltip"]& ], 
                 
                 EventHandlerTag[{
                  "MouseClicked" :> 
                   FEPrivate`Set[DynamicChart`click$3081$3302, 
                    FEPrivate`Not[DynamicChart`click$3081$3302]], 
                   PassEventsDown -> True, Method -> "Preemptive", 
                   PassEventsUp -> True}]], 
                Dynamic[
                 If[
                 DynamicChart`click$3081$3302, {{{1., 0}, {
                    0, 1.}}, {-0.14503882706993065`, -0.13770889093366032`}}, \
{{1, 0}, {0, 1}}, {{1, 0}, {0, 1}}], 
                 TrackedSymbols :> {DynamicChart`click$3081$3302}]]}, {
               Directive[
                EdgeForm[
                 Directive[
                  GrayLevel[0], 
                  Opacity[0.5]]], 
                RGBColor[
                0.6909664, 0.48342857142857143`, 0.6478393142857142]], 
               GeometricTransformationBox[
                TagBox[
                 TagBox[
                  TooltipBox[
                   TagBox[{
                    DynamicBox[{
                    FEPrivate`If[
                    CurrentValue["MouseOver"], 
                    EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[2.5], 
                    Opacity[0.66]}], {}, {}], 
                    
                    DiskBox[{0, 0}, 
                    1., {-2.993309480340355, -2.694544018983966}]}], {}}, 
                    StatusArea[#, 951]& , TagBoxNote -> "951"], 
                   StyleBox["951", {
                    GrayLevel[0], FontFamily -> "Arial"}, StripOnInput -> 
                    False]], Annotation[#, 
                   Style[951, {
                    GrayLevel[0], FontFamily -> "Arial"}], "Tooltip"]& ], 
                 
                 EventHandlerTag[{
                  "MouseClicked" :> 
                   FEPrivate`Set[DynamicChart`click$3086$3302, 
                    FEPrivate`Not[DynamicChart`click$3086$3302]], 
                   PassEventsDown -> True, Method -> "Preemptive", 
                   PassEventsUp -> True}]], 
                Dynamic[
                 If[
                 DynamicChart`click$3086$3302, {{{1., 0}, {
                    0, 1.}}, {-0.1912047317430826, -0.058657911308329196`}}, \
{{1, 0}, {0, 1}}, {{1, 0}, {0, 1}}], 
                 TrackedSymbols :> {DynamicChart`click$3086$3302}]]}, {
               Directive[
                EdgeForm[
                 Directive[
                  GrayLevel[0], 
                  Opacity[0.5]]], 
                RGBColor[
                0.6502806857142857, 0.4948571428571429, 0.7379722285714285]], 
               
               GeometricTransformationBox[
                TagBox[
                 TagBox[
                  TooltipBox[
                   TagBox[{
                    DynamicBox[{
                    FEPrivate`If[
                    CurrentValue["MouseOver"], 
                    EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[2.5], 
                    Opacity[0.66]}], {}, {}], 
                    
                    DiskBox[{0, 0}, 
                    1., {-3.1142607975035626`, -2.993309480340355}]}], {}}, 
                    StatusArea[#, 385]& , TagBoxNote -> "385"], 
                   StyleBox["385", {
                    GrayLevel[0], FontFamily -> "Arial"}, StripOnInput -> 
                    False]], Annotation[#, 
                   Style[385, {
                    GrayLevel[0], FontFamily -> "Arial"}], "Tooltip"]& ], 
                 
                 EventHandlerTag[{
                  "MouseClicked" :> 
                   FEPrivate`Set[DynamicChart`click$3091$3302, 
                    FEPrivate`Not[DynamicChart`click$3091$3302]], 
                   PassEventsDown -> True, Method -> "Preemptive", 
                   PassEventsUp -> True}]], 
                Dynamic[
                 If[
                 DynamicChart`click$3091$3302, {{{1., 0}, {
                    0, 1.}}, {-0.19922947929749893`, \
-0.017538944633228356`}}, {{1, 0}, {0, 1}}, {{1, 0}, {0, 1}}], 
                 TrackedSymbols :> {DynamicChart`click$3091$3302}]]}, {
               Directive[
                EdgeForm[
                 Directive[
                  GrayLevel[0], 
                  Opacity[0.5]]], 
                RGBColor[
                0.5999204571428571, 0.5149714285714285, 0.7689582857142857]], 
               
               GeometricTransformationBox[
                TagBox[
                 TagBox[
                  TooltipBox[
                   TagBox[{
                    DynamicBox[{
                    FEPrivate`If[
                    CurrentValue["MouseOver"], 
                    EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[2.5], 
                    Opacity[0.66]}], {}, {}], 
                    
                    DiskBox[{0, 0}, 
                    1., {-3.135309468282614, -3.1142607975035626`}]}], {}}, 
                    StatusArea[#, 67]& , TagBoxNote -> "67"], 
                   StyleBox["67", {
                    GrayLevel[0], FontFamily -> "Arial"}, StripOnInput -> 
                    False]], Annotation[#, 
                   Style[67, {
                    GrayLevel[0], FontFamily -> "Arial"}], "Tooltip"]& ], 
                 
                 EventHandlerTag[{
                  "MouseClicked" :> 
                   FEPrivate`Set[DynamicChart`click$3096$3302, 
                    FEPrivate`Not[DynamicChart`click$3096$3302]], 
                   PassEventsDown -> True, Method -> "Preemptive", 
                   PassEventsUp -> True}]], 
                Dynamic[
                 If[
                 DynamicChart`click$3096$3302, {{{1., 0}, {
                    0, 1.}}, {-0.1999717513898147, -0.0033613458748172663`}}, \
{{1, 0}, {0, 1}}, {{1, 0}, {0, 1}}], 
                 TrackedSymbols :> {DynamicChart`click$3096$3302}]]}, {
               Directive[
                EdgeForm[
                 Directive[
                  GrayLevel[0], 
                  Opacity[0.5]]], 
                RGBColor[
                0.5495602285714286, 0.5350857142857143, 0.7999443428571428]], 
               
               GeometricTransformationBox[
                TagBox[
                 TagBox[
                  TooltipBox[
                   TagBox[{
                    DynamicBox[{
                    FEPrivate`If[
                    CurrentValue["MouseOver"], 
                    EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[2.5], 
                    Opacity[0.66]}], {}, {}], 
                    
                    DiskBox[{0, 0}, 
                    1., {-3.1412784943244345`, -3.135309468282614}]}], {}}, 
                    StatusArea[#, 19]& , TagBoxNote -> "19"], 
                   StyleBox["19", {
                    GrayLevel[0], FontFamily -> "Arial"}, StripOnInput -> 
                    False]], Annotation[#, 
                   Style[19, {
                    GrayLevel[0], FontFamily -> "Arial"}], "Tooltip"]& ], 
                 
                 EventHandlerTag[{
                  "MouseClicked" :> 
                   FEPrivate`Set[DynamicChart`click$3101$3302, 
                    FEPrivate`Not[DynamicChart`click$3101$3302]], 
                   PassEventsDown -> True, Method -> "Preemptive", 
                   PassEventsUp -> True}]], 
                Dynamic[
                 If[
                 DynamicChart`click$3101$3302, {{{1., 0}, {
                    0, 1.}}, {-0.19999891187710148`, \
-0.0006597332607997541}}, {{1, 0}, {0, 1}}, {{1, 0}, {0, 1}}], 
                 TrackedSymbols :> {DynamicChart`click$3101$3302}]]}, {
               Directive[
                EdgeForm[
                 Directive[
                  GrayLevel[0], 
                  Opacity[0.5]]], 
                RGBColor[0.4992, 0.5552, 0.8309304]], 
               GeometricTransformationBox[
                TagBox[
                 TagBox[
                  TooltipBox[
                   TagBox[{
                    DynamicBox[{
                    FEPrivate`If[
                    CurrentValue["MouseOver"], 
                    EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[2.5], 
                    Opacity[0.66]}], {}, {}], 
                    
                    DiskBox[{0, 0}, 
                    1., {-3.141592653589793, -3.1412784943244345`}]}], {}}, 
                    StatusArea[#, 1]& , TagBoxNote -> "1"], 
                   StyleBox["1", {
                    GrayLevel[0], FontFamily -> "Arial"}, StripOnInput -> 
                    False]], Annotation[#, 
                   Style[1, {
                    GrayLevel[0], FontFamily -> "Arial"}], "Tooltip"]& ], 
                 
                 EventHandlerTag[{
                  "MouseClicked" :> 
                   FEPrivate`Set[DynamicChart`click$3106$3302, 
                    FEPrivate`Not[DynamicChart`click$3106$3302]], 
                   PassEventsDown -> True, Method -> "Preemptive", 
                   PassEventsUp -> True}]], 
                Dynamic[
                 If[
                 DynamicChart`click$3106$3302, {{{1., 0}, {
                    0, 1.}}, {-0.1999999975325989, \
-0.000031415926406692126`}}, {{1, 0}, {0, 1}}, {{1, 0}, {0, 1}}], 
                 TrackedSymbols :> {
                  DynamicChart`click$3106$3302}]]}}}}}, {}}, {{}}}}, {{{{
           GeometricTransformationBox[
            TagBox[
             TagBox[
              TooltipBox[
               TagBox[{{}, {{}, {
                   InsetBox[
                    FormBox[
                    StyleBox["3", {
                    GrayLevel[0], FontFamily -> "Arial"}, StripOnInput -> 
                    False], TraditionalForm], {-0.666666592644635, 
                    0.00031415925373162853`}]}}}, StatusArea[#, 3]& , 
                TagBoxNote -> "3"], 
               StyleBox["3", {
                 GrayLevel[0], FontFamily -> "Arial"}, StripOnInput -> 
                False]], Annotation[#, 
               Style[3, {
                 GrayLevel[0], FontFamily -> "Arial"}], "Tooltip"]& ], 
             
             EventHandlerTag[{
              "MouseClicked" :> FEPrivate`Set[DynamicChart`click$3033$3302, 
                 FEPrivate`Not[DynamicChart`click$3033$3302]], PassEventsDown -> 
               True, Method -> "Preemptive", PassEventsUp -> True}]], 
            Dynamic[
             If[
             DynamicChart`click$3033$3302, {{{1., 0}, {
                0, 1.}}, {-0.19999997779339052`, 0.00009424777611948858}}, {{
              1, 0}, {0, 1}}, {{1, 0}, {0, 1}}], 
             TrackedSymbols :> {DynamicChart`click$3033$3302}]], 
           GeometricTransformationBox[
            TagBox[
             TagBox[
              TooltipBox[
               TagBox[{{}, {{}, {
                   InsetBox[
                    FormBox[
                    StyleBox["27", {
                    GrayLevel[0], FontFamily -> "Arial"}, StripOnInput -> 
                    False], TraditionalForm], {-0.666657710020728, 
                    0.0034557364429618196`}]}}}, StatusArea[#, 27]& , 
                TagBoxNote -> "27"], 
               StyleBox["27", {
                 GrayLevel[0], FontFamily -> "Arial"}, StripOnInput -> 
                False]], Annotation[#, 
               Style[27, {
                 GrayLevel[0], FontFamily -> "Arial"}], "Tooltip"]& ], 
             
             EventHandlerTag[{
              "MouseClicked" :> FEPrivate`Set[DynamicChart`click$3041$3302, 
                 FEPrivate`Not[DynamicChart`click$3041$3302]], PassEventsDown -> 
               True, Method -> "Preemptive", PassEventsUp -> True}]], 
            Dynamic[
             If[
             DynamicChart`click$3041$3302, {{{1., 0}, {
                0, 1.}}, {-0.19999731300621845`, 0.001036720932888546}}, {{1, 
              0}, {0, 1}}, {{1, 0}, {0, 1}}], 
             TrackedSymbols :> {DynamicChart`click$3041$3302}]], 
           GeometricTransformationBox[
            TagBox[
             TagBox[
              TooltipBox[
               TagBox[{{}, {{}, {
                   InsetBox[
                    FormBox[
                    StyleBox["197", {
                    GrayLevel[0], FontFamily -> "Arial"}, StripOnInput -> 
                    False], TraditionalForm], {-0.6661235091868007, 
                    0.026905667676283024`}]}}}, StatusArea[#, 197]& , 
                TagBoxNote -> "197"], 
               StyleBox["197", {
                 GrayLevel[0], FontFamily -> "Arial"}, StripOnInput -> 
                False]], Annotation[#, 
               Style[197, {
                 GrayLevel[0], FontFamily -> "Arial"}], "Tooltip"]& ], 
             
             EventHandlerTag[{
              "MouseClicked" :> FEPrivate`Set[DynamicChart`click$3046$3302, 
                 FEPrivate`Not[DynamicChart`click$3046$3302]], PassEventsDown -> 
               True, Method -> "Preemptive", PassEventsUp -> True}]], 
            Dynamic[
             If[
             DynamicChart`click$3046$3302, {{{1., 0}, {
                0, 1.}}, {-0.19983705275604025`, 0.008071700302884907}}, {{1, 
              0}, {0, 1}}, {{1, 0}, {0, 1}}], 
             TrackedSymbols :> {DynamicChart`click$3046$3302}]], 
           GeometricTransformationBox[
            TagBox[
             TagBox[
              TooltipBox[
               TagBox[{{}, {{}, {
                   InsetBox[
                    FormBox[
                    StyleBox["655", {
                    GrayLevel[0], FontFamily -> "Arial"}, StripOnInput -> 
                    False], TraditionalForm], {-0.6565768551862654, 
                    0.11554772900476379`}]}}}, StatusArea[#, 655]& , 
                TagBoxNote -> "655"], 
               StyleBox["655", {
                 GrayLevel[0], FontFamily -> "Arial"}, StripOnInput -> 
                False]], Annotation[#, 
               Style[655, {
                 GrayLevel[0], FontFamily -> "Arial"}], "Tooltip"]& ], 
             
             EventHandlerTag[{
              "MouseClicked" :> FEPrivate`Set[DynamicChart`click$3051$3302, 
                 FEPrivate`Not[DynamicChart`click$3051$3302]], PassEventsDown -> 
               True, Method -> "Preemptive", PassEventsUp -> True}]], 
            Dynamic[
             If[
             DynamicChart`click$3051$3302, {{{1., 0}, {
                0, 1.}}, {-0.19697305655587963`, 0.034664318701429137`}}, {{1,
               0}, {0, 1}}, {{1, 0}, {0, 1}}], 
             TrackedSymbols :> {DynamicChart`click$3051$3302}]], 
           GeometricTransformationBox[
            TagBox[
             TagBox[
              TooltipBox[
               TagBox[{{}, {{}, {
                   InsetBox[
                    FormBox[
                    StyleBox["1664", {
                    GrayLevel[0], FontFamily -> "Arial"}, StripOnInput -> 
                    False], TraditionalForm], {-0.5723298852500696, 
                    0.34188148077087555`}]}}}, StatusArea[#, 1664]& , 
                TagBoxNote -> "1664"], 
               StyleBox["1664", {
                 GrayLevel[0], FontFamily -> "Arial"}, StripOnInput -> 
                False]], Annotation[#, 
               Style[1664, {
                 GrayLevel[0], FontFamily -> "Arial"}], "Tooltip"]& ], 
             
             EventHandlerTag[{
              "MouseClicked" :> FEPrivate`Set[DynamicChart`click$3056$3302, 
                 FEPrivate`Not[DynamicChart`click$3056$3302]], PassEventsDown -> 
               True, Method -> "Preemptive", PassEventsUp -> True}]], 
            Dynamic[
             If[
             DynamicChart`click$3056$3302, {{{1., 0}, {
                0, 1.}}, {-0.1716989655750209, 0.10256444423126268`}}, {{1, 
              0}, {0, 1}}, {{1, 0}, {0, 1}}], 
             TrackedSymbols :> {DynamicChart`click$3056$3302}]], 
           GeometricTransformationBox[
            TagBox[
             TagBox[
              TooltipBox[
               TagBox[{{}, {{}, {
                   InsetBox[
                    FormBox[
                    StyleBox["2939", {
                    GrayLevel[0], FontFamily -> "Arial"}, StripOnInput -> 
                    False], TraditionalForm], {-0.20292147277729206`, 
                    0.6350333222204478}]}}}, StatusArea[#, 2939]& , 
                TagBoxNote -> "2939"], 
               StyleBox["2939", {
                 GrayLevel[0], FontFamily -> "Arial"}, StripOnInput -> 
                False]], Annotation[#, 
               Style[2939, {
                 GrayLevel[0], FontFamily -> "Arial"}], "Tooltip"]& ], 
             
             EventHandlerTag[{
              "MouseClicked" :> FEPrivate`Set[DynamicChart`click$3061$3302, 
                 FEPrivate`Not[DynamicChart`click$3061$3302]], PassEventsDown -> 
               True, Method -> "Preemptive", PassEventsUp -> True}]], 
            Dynamic[
             If[
             DynamicChart`click$3061$3302, {{{1., 0}, {
                0, 1.}}, {-0.060876441833187626`, 0.19050999666613436`}}, {{1,
               0}, {0, 1}}, {{1, 0}, {0, 1}}], 
             TrackedSymbols :> {DynamicChart`click$3061$3302}]], 
           GeometricTransformationBox[
            TagBox[
             TagBox[
              TooltipBox[
               TagBox[{{}, {{}, {
                   InsetBox[
                    FormBox[
                    StyleBox["3882", {
                    GrayLevel[0], FontFamily -> "Arial"}, StripOnInput -> 
                    False], TraditionalForm], {0.4603190148789538, 
                    0.4822352631084893}]}}}, StatusArea[#, 3882]& , 
                TagBoxNote -> "3882"], 
               StyleBox["3882", {
                 GrayLevel[0], FontFamily -> "Arial"}, StripOnInput -> 
                False]], Annotation[#, 
               Style[3882, {
                 GrayLevel[0], FontFamily -> "Arial"}], "Tooltip"]& ], 
             
             EventHandlerTag[{
              "MouseClicked" :> FEPrivate`Set[DynamicChart`click$3066$3302, 
                 FEPrivate`Not[DynamicChart`click$3066$3302]], PassEventsDown -> 
               True, Method -> "Preemptive", PassEventsUp -> True}]], 
            Dynamic[
             If[
             DynamicChart`click$3066$3302, {{{1., 0}, {0, 1.}}, {
               0.13809570446368616`, 0.1446705789325468}}, {{1, 0}, {0, 
              1}}, {{1, 0}, {0, 1}}], 
             TrackedSymbols :> {DynamicChart`click$3066$3302}]], 
           GeometricTransformationBox[
            TagBox[
             TagBox[
              TooltipBox[
               TagBox[{{}, {{}, {
                   InsetBox[
                    FormBox[
                    StyleBox["3940", {
                    GrayLevel[0], FontFamily -> "Arial"}, StripOnInput -> 
                    False], TraditionalForm], {
                    0.6087175497800801, -0.27185913454246874`}]}}}, 
                StatusArea[#, 3940]& , TagBoxNote -> "3940"], 
               StyleBox["3940", {
                 GrayLevel[0], FontFamily -> "Arial"}, StripOnInput -> 
                False]], Annotation[#, 
               Style[3940, {
                 GrayLevel[0], FontFamily -> "Arial"}], "Tooltip"]& ], 
             
             EventHandlerTag[{
              "MouseClicked" :> FEPrivate`Set[DynamicChart`click$3071$3302, 
                 FEPrivate`Not[DynamicChart`click$3071$3302]], PassEventsDown -> 
               True, Method -> "Preemptive", PassEventsUp -> True}]], 
            Dynamic[
             If[
             DynamicChart`click$3071$3302, {{{1., 0}, {0, 1.}}, {
               0.18261526493402402`, -0.08155774036274063}}, {{1, 0}, {0, 
              1}}, {{1, 0}, {0, 1}}], 
             TrackedSymbols :> {DynamicChart`click$3071$3302}]], 
           GeometricTransformationBox[
            TagBox[
             TagBox[
              TooltipBox[
               TagBox[{{}, {{}, {
                   InsetBox[
                    FormBox[
                    StyleBox["3281", {
                    GrayLevel[0], FontFamily -> "Arial"}, StripOnInput -> 
                    False], TraditionalForm], {
                    0.010995075771552613`, -0.6665759917317922}]}}}, 
                StatusArea[#, 3281]& , TagBoxNote -> "3281"], 
               StyleBox["3281", {
                 GrayLevel[0], FontFamily -> "Arial"}, StripOnInput -> 
                False]], Annotation[#, 
               Style[3281, {
                 GrayLevel[0], FontFamily -> "Arial"}], "Tooltip"]& ], 
             
             EventHandlerTag[{
              "MouseClicked" :> FEPrivate`Set[DynamicChart`click$3076$3302, 
                 FEPrivate`Not[DynamicChart`click$3076$3302]], PassEventsDown -> 
               True, Method -> "Preemptive", PassEventsUp -> True}]], 
            Dynamic[
             If[
             DynamicChart`click$3076$3302, {{{1., 0}, {0, 1.}}, {
               0.003298522731465784, -0.19997279751953767`}}, {{1, 0}, {0, 
              1}}, {{1, 0}, {0, 1}}], 
             TrackedSymbols :> {DynamicChart`click$3076$3302}]], 
           GeometricTransformationBox[
            TagBox[
             TagBox[
              TooltipBox[
               TagBox[{{}, {{}, {
                   InsetBox[
                    FormBox[
                    StyleBox["1989", {
                    GrayLevel[0], FontFamily -> "Arial"}, StripOnInput -> 
                    False], 
                    TraditionalForm], {-0.4834627568997688, \
-0.4590296364455344}]}}}, StatusArea[#, 1989]& , TagBoxNote -> "1989"], 
               StyleBox["1989", {
                 GrayLevel[0], FontFamily -> "Arial"}, StripOnInput -> 
                False]], Annotation[#, 
               Style[1989, {
                 GrayLevel[0], FontFamily -> "Arial"}], "Tooltip"]& ], 
             
             EventHandlerTag[{
              "MouseClicked" :> FEPrivate`Set[DynamicChart`click$3081$3302, 
                 FEPrivate`Not[DynamicChart`click$3081$3302]], PassEventsDown -> 
               True, Method -> "Preemptive", PassEventsUp -> True}]], 
            Dynamic[
             If[
             DynamicChart`click$3081$3302, {{{1., 0}, {
                0, 1.}}, {-0.14503882706993065`, -0.13770889093366032`}}, {{1,
               0}, {0, 1}}, {{1, 0}, {0, 1}}], 
             TrackedSymbols :> {DynamicChart`click$3081$3302}]], 
           GeometricTransformationBox[
            TagBox[
             TagBox[
              TooltipBox[
               TagBox[{{}, {{}, {
                   InsetBox[
                    FormBox[
                    StyleBox["951", {
                    GrayLevel[0], FontFamily -> "Arial"}, StripOnInput -> 
                    False], 
                    TraditionalForm], {-0.6373491058102754, \
-0.19552637102776396`}]}}}, StatusArea[#, 951]& , TagBoxNote -> "951"], 
               StyleBox["951", {
                 GrayLevel[0], FontFamily -> "Arial"}, StripOnInput -> 
                False]], Annotation[#, 
               Style[951, {
                 GrayLevel[0], FontFamily -> "Arial"}], "Tooltip"]& ], 
             
             EventHandlerTag[{
              "MouseClicked" :> FEPrivate`Set[DynamicChart`click$3086$3302, 
                 FEPrivate`Not[DynamicChart`click$3086$3302]], PassEventsDown -> 
               True, Method -> "Preemptive", PassEventsUp -> True}]], 
            Dynamic[
             If[
             DynamicChart`click$3086$3302, {{{1., 0}, {
                0, 1.}}, {-0.1912047317430826, -0.058657911308329196`}}, {{1, 
              0}, {0, 1}}, {{1, 0}, {0, 1}}], 
             TrackedSymbols :> {DynamicChart`click$3086$3302}]], 
           GeometricTransformationBox[
            TagBox[
             TagBox[
              TooltipBox[
               TagBox[{{}, {{}, {
                   InsetBox[
                    FormBox[
                    StyleBox["385", {
                    GrayLevel[0], FontFamily -> "Arial"}, StripOnInput -> 
                    False], 
                    TraditionalForm], {-0.6640982643249964, \
-0.058463148777427844`}]}}}, StatusArea[#, 385]& , TagBoxNote -> "385"], 
               StyleBox["385", {
                 GrayLevel[0], FontFamily -> "Arial"}, StripOnInput -> 
                False]], Annotation[#, 
               Style[385, {
                 GrayLevel[0], FontFamily -> "Arial"}], "Tooltip"]& ], 
             
             EventHandlerTag[{
              "MouseClicked" :> FEPrivate`Set[DynamicChart`click$3091$3302, 
                 FEPrivate`Not[DynamicChart`click$3091$3302]], PassEventsDown -> 
               True, Method -> "Preemptive", PassEventsUp -> True}]], 
            Dynamic[
             If[
             DynamicChart`click$3091$3302, {{{1., 0}, {
                0, 1.}}, {-0.19922947929749893`, -0.017538944633228356`}}, {{
              1, 0}, {0, 1}}, {{1, 0}, {0, 1}}], 
             TrackedSymbols :> {DynamicChart`click$3091$3302}]], 
           GeometricTransformationBox[
            TagBox[
             TagBox[
              TooltipBox[
               TagBox[{{}, {{}, {
                   InsetBox[
                    FormBox[
                    StyleBox["67", {
                    GrayLevel[0], FontFamily -> "Arial"}, StripOnInput -> 
                    False], 
                    TraditionalForm], {-0.6665725046327156, \
-0.011204486249390886`}]}}}, StatusArea[#, 67]& , TagBoxNote -> "67"], 
               StyleBox["67", {
                 GrayLevel[0], FontFamily -> "Arial"}, StripOnInput -> 
                False]], Annotation[#, 
               Style[67, {
                 GrayLevel[0], FontFamily -> "Arial"}], "Tooltip"]& ], 
             
             EventHandlerTag[{
              "MouseClicked" :> FEPrivate`Set[DynamicChart`click$3096$3302, 
                 FEPrivate`Not[DynamicChart`click$3096$3302]], PassEventsDown -> 
               True, Method -> "Preemptive", PassEventsUp -> True}]], 
            Dynamic[
             If[
             DynamicChart`click$3096$3302, {{{1., 0}, {
                0, 1.}}, {-0.1999717513898147, -0.0033613458748172663`}}, {{1,
               0}, {0, 1}}, {{1, 0}, {0, 1}}], 
             TrackedSymbols :> {DynamicChart`click$3096$3302}]], 
           GeometricTransformationBox[
            TagBox[
             TagBox[
              TooltipBox[
               TagBox[{{}, {{}, {
                   InsetBox[
                    FormBox[
                    StyleBox["19", {
                    GrayLevel[0], FontFamily -> "Arial"}, StripOnInput -> 
                    False], 
                    TraditionalForm], {-0.6666630395903381, \
-0.0021991108693325133`}]}}}, StatusArea[#, 19]& , TagBoxNote -> "19"], 
               StyleBox["19", {
                 GrayLevel[0], FontFamily -> "Arial"}, StripOnInput -> 
                False]], Annotation[#, 
               Style[19, {
                 GrayLevel[0], FontFamily -> "Arial"}], "Tooltip"]& ], 
             
             EventHandlerTag[{
              "MouseClicked" :> FEPrivate`Set[DynamicChart`click$3101$3302, 
                 FEPrivate`Not[DynamicChart`click$3101$3302]], PassEventsDown -> 
               True, Method -> "Preemptive", PassEventsUp -> True}]], 
            Dynamic[
             If[
             DynamicChart`click$3101$3302, {{{1., 0}, {
                0, 1.}}, {-0.19999891187710148`, -0.0006597332607997541}}, {{
              1, 0}, {0, 1}}, {{1, 0}, {0, 1}}], 
             TrackedSymbols :> {DynamicChart`click$3101$3302}]], 
           GeometricTransformationBox[
            TagBox[
             TagBox[
              TooltipBox[
               TagBox[{{}, {{}, {
                   InsetBox[
                    FormBox[
                    StyleBox["1", {
                    GrayLevel[0], FontFamily -> "Arial"}, StripOnInput -> 
                    False], 
                    TraditionalForm], {-0.6666666584419962, \
-0.00010471975468897373`}]}}}, StatusArea[#, 1]& , TagBoxNote -> "1"], 
               StyleBox["1", {
                 GrayLevel[0], FontFamily -> "Arial"}, StripOnInput -> 
                False]], Annotation[#, 
               Style[1, {
                 GrayLevel[0], FontFamily -> "Arial"}], "Tooltip"]& ], 
             
             EventHandlerTag[{
              "MouseClicked" :> FEPrivate`Set[DynamicChart`click$3106$3302, 
                 FEPrivate`Not[DynamicChart`click$3106$3302]], PassEventsDown -> 
               True, Method -> "Preemptive", PassEventsUp -> True}]], 
            Dynamic[
             If[
             DynamicChart`click$3106$3302, {{{1., 0}, {
                0, 1.}}, {-0.1999999975325989, -0.000031415926406692126`}}, {{
              1, 0}, {0, 1}}, {{1, 0}, {0, 1}}], 
             TrackedSymbols :> {DynamicChart`click$3106$3302}]]}, {}}}, {}}}, 
      DynamicModuleValues :> {}], {{{}, {}}}, {{{{}, {}, {}, {}}}, {}}}, {
    ContentSelectable -> False, GridLinesStyle -> Directive[
       GrayLevel[0.5, 0.4]], ImageSize -> Medium, LabelStyle -> {
       GrayLevel[0], FontFamily -> "Arial"}, PlotLabel -> 
     FormBox["\"Pie Chart of number of missing components\"", 
       TraditionalForm], PlotRange -> {{-1.2, 1.2}, {-1.2, 1.2}}, 
     PlotRangePadding -> Scaled[0.02]}], 
   FormBox[
    FormBox[
     TemplateBox[{
      "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", 
       "13", "14"}, "SwatchLegend", DisplayFunction -> (FormBox[
        StyleBox[
         StyleBox[
          PaneBox[
           TagBox[
            GridBox[{{
               TagBox[
                GridBox[{{
                   GraphicsBox[{
                    Directive[
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    EdgeForm[
                    Directive[
                    GrayLevel[0], 
                    Opacity[0.5]]], 
                    RGBColor[0.982864, 0.7431472, 0.3262672]], 
                    RectangleBox[{0, 0}, {10, 10}, "RoundingRadius" -> 0]}, 
                    AspectRatio -> Full, ImageSize -> {10, 10}, 
                    PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                   GraphicsBox[{
                    Directive[
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    EdgeForm[
                    Directive[
                    GrayLevel[0], 
                    Opacity[0.5]]], 
                    RGBColor[0.98776, 0.686248, 0.29019085714285714`]], 
                    RectangleBox[{0, 0}, {10, 10}, "RoundingRadius" -> 0]}, 
                    AspectRatio -> Full, ImageSize -> {10, 10}, 
                    PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}, {
                   GraphicsBox[{
                    Directive[
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    EdgeForm[
                    Directive[
                    GrayLevel[0], 
                    Opacity[0.5]]], 
                    RGBColor[0.992656, 0.6293488, 0.2541145142857143]], 
                    RectangleBox[{0, 0}, {10, 10}, "RoundingRadius" -> 0]}, 
                    AspectRatio -> Full, ImageSize -> {10, 10}, 
                    PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #3}, {
                   GraphicsBox[{
                    Directive[
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    EdgeForm[
                    Directive[
                    GrayLevel[0], 
                    Opacity[0.5]]], 
                    RGBColor[0.997552, 0.5724496, 0.21803817142857146`]], 
                    RectangleBox[{0, 0}, {10, 10}, "RoundingRadius" -> 0]}, 
                    AspectRatio -> Full, ImageSize -> {10, 10}, 
                    PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #4}, {
                   GraphicsBox[{
                    Directive[
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    EdgeForm[
                    Directive[
                    GrayLevel[0], 
                    Opacity[0.5]]], 
                    RGBColor[0.9691428571428572, 0.5341714285714286, 0.2]], 
                    RectangleBox[{0, 0}, {10, 10}, "RoundingRadius" -> 0]}, 
                    AspectRatio -> Full, ImageSize -> {10, 10}, 
                    PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #5}, {
                   GraphicsBox[{
                    Directive[
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    EdgeForm[
                    Directive[
                    GrayLevel[0], 
                    Opacity[0.5]]], 
                    RGBColor[0.9074285714285715, 0.5145142857142857, 0.2]], 
                    RectangleBox[{0, 0}, {10, 10}, "RoundingRadius" -> 0]}, 
                    AspectRatio -> Full, ImageSize -> {10, 10}, 
                    PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #6}, {
                   GraphicsBox[{
                    Directive[
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    EdgeForm[
                    Directive[
                    GrayLevel[0], 
                    Opacity[0.5]]], 
                    RGBColor[0.8457142857142858, 0.49485714285714283`, 0.2]], 
                    
                    RectangleBox[{0, 0}, {10, 10}, "RoundingRadius" -> 0]}, 
                    AspectRatio -> Full, ImageSize -> {10, 10}, 
                    PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #7}, {
                   GraphicsBox[{
                    Directive[
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    EdgeForm[
                    Directive[
                    GrayLevel[0], 
                    Opacity[0.5]]], 
                    RGBColor[0.784, 0.47519999999999996`, 0.2]], 
                    RectangleBox[{0, 0}, {10, 10}, "RoundingRadius" -> 0]}, 
                    AspectRatio -> Full, ImageSize -> {10, 10}, 
                    PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #8}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                 AutoDelete -> False, 
                 GridBoxDividers -> {
                  "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                 GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}},
                  GridBoxSpacings -> {
                  "Columns" -> {{0.5}}, "Rows" -> {{0.5}}}], "Grid"], 
               TagBox[
                GridBox[{{
                   GraphicsBox[{
                    Directive[
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    EdgeForm[
                    Directive[
                    GrayLevel[0], 
                    Opacity[0.5]]], 
                    RGBColor[
                    0.7529888, 0.4779428571428571, 0.34927977142857136`]], 
                    RectangleBox[{0, 0}, {10, 10}, "RoundingRadius" -> 0]}, 
                    AspectRatio -> Full, ImageSize -> {10, 10}, 
                    PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #9}, {
                   GraphicsBox[{
                    Directive[
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    EdgeForm[
                    Directive[
                    GrayLevel[0], 
                    Opacity[0.5]]], 
                    RGBColor[
                    0.7219776, 0.48068571428571427`, 0.49855954285714277`]], 
                    RectangleBox[{0, 0}, {10, 10}, "RoundingRadius" -> 0]}, 
                    AspectRatio -> Full, ImageSize -> {10, 10}, 
                    PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #10}, {
                   GraphicsBox[{
                    Directive[
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    EdgeForm[
                    Directive[
                    GrayLevel[0], 
                    Opacity[0.5]]], 
                    RGBColor[
                    0.6909664, 0.48342857142857143`, 0.6478393142857142]], 
                    RectangleBox[{0, 0}, {10, 10}, "RoundingRadius" -> 0]}, 
                    AspectRatio -> Full, ImageSize -> {10, 10}, 
                    PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #11}, {
                   GraphicsBox[{
                    Directive[
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    EdgeForm[
                    Directive[
                    GrayLevel[0], 
                    Opacity[0.5]]], 
                    RGBColor[
                    0.6502806857142857, 0.4948571428571429, 
                    0.7379722285714285]], 
                    RectangleBox[{0, 0}, {10, 10}, "RoundingRadius" -> 0]}, 
                    AspectRatio -> Full, ImageSize -> {10, 10}, 
                    PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #12}, {
                   GraphicsBox[{
                    Directive[
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    EdgeForm[
                    Directive[
                    GrayLevel[0], 
                    Opacity[0.5]]], 
                    RGBColor[
                    0.5999204571428571, 0.5149714285714285, 
                    0.7689582857142857]], 
                    RectangleBox[{0, 0}, {10, 10}, "RoundingRadius" -> 0]}, 
                    AspectRatio -> Full, ImageSize -> {10, 10}, 
                    PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #13}, {
                   GraphicsBox[{
                    Directive[
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    EdgeForm[
                    Directive[
                    GrayLevel[0], 
                    Opacity[0.5]]], 
                    RGBColor[
                    0.5495602285714286, 0.5350857142857143, 
                    0.7999443428571428]], 
                    RectangleBox[{0, 0}, {10, 10}, "RoundingRadius" -> 0]}, 
                    AspectRatio -> Full, ImageSize -> {10, 10}, 
                    PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #14}, {
                   GraphicsBox[{
                    Directive[
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    EdgeForm[
                    Directive[
                    GrayLevel[0], 
                    Opacity[0.5]]], 
                    RGBColor[0.4992, 0.5552, 0.8309304]], 
                    RectangleBox[{0, 0}, {10, 10}, "RoundingRadius" -> 0]}, 
                    AspectRatio -> Full, ImageSize -> {10, 10}, 
                    PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #15}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                 AutoDelete -> False, 
                 GridBoxDividers -> {
                  "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                 GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}},
                  GridBoxSpacings -> {
                  "Columns" -> {{0.5}}, "Rows" -> {{0.5}}}], "Grid"]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
            "Grid"], Alignment -> Left, AppearanceElements -> None, 
           ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
           "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
          GrayLevel[0], FontFamily -> "Arial", FontFamily -> "Arial"}, 
         Background -> Automatic, StripOnInput -> False], TraditionalForm]& ),
       InterpretationFunction :> (RowBox[{"SwatchLegend", "[", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.], FrameTicks -> None, 
                    PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], "GrayLevel[0]"], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0], Editable -> False, Selectable -> False], 
                    ",", 
                    RowBox[{"Opacity", "[", "0.5`", "]"}]}], "]"}], "]"}], 
                   ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.982864, 0.7431472, 0.3262672], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[
                    0.6552426666666666, 0.4954314666666667, 
                    0.21751146666666665`], FrameTicks -> None, 
                    PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    "RGBColor[0.982864, 0.7431472, 0.3262672]"], Appearance -> 
                    None, BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.982864, 0.7431472, 0.3262672]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.982864, 0.7431472, 0.3262672], Editable -> 
                    False, Selectable -> False]}], "]"}], ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.], FrameTicks -> None, 
                    PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], "GrayLevel[0]"], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0], Editable -> False, Selectable -> False], 
                    ",", 
                    RowBox[{"Opacity", "[", "0.5`", "]"}]}], "]"}], "]"}], 
                   ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.98776, 0.686248, 0.29019085714285714`], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[
                    0.6585066666666667, 0.45749866666666666`, 
                    0.19346057142857143`], FrameTicks -> None, 
                    PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    "RGBColor[0.98776, 0.686248, 0.29019085714285714]"], 
                    Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.98776, 0.686248, 0.29019085714285714`]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.98776, 0.686248, 0.29019085714285714`], 
                    Editable -> False, Selectable -> False]}], "]"}], ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.], FrameTicks -> None, 
                    PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], "GrayLevel[0]"], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0], Editable -> False, Selectable -> False], 
                    ",", 
                    RowBox[{"Opacity", "[", "0.5`", "]"}]}], "]"}], "]"}], 
                   ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.992656, 0.6293488, 0.2541145142857143], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[
                    0.6617706666666667, 0.41956586666666673`, 
                    0.1694096761904762], FrameTicks -> None, PlotRangePadding -> 
                    None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    "RGBColor[0.992656, 0.6293488, 0.2541145142857143]"], 
                    Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.992656, 0.6293488, 0.2541145142857143]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.992656, 0.6293488, 0.2541145142857143], 
                    Editable -> False, Selectable -> False]}], "]"}], ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.], FrameTicks -> None, 
                    PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], "GrayLevel[0]"], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0], Editable -> False, Selectable -> False], 
                    ",", 
                    RowBox[{"Opacity", "[", "0.5`", "]"}]}], "]"}], "]"}], 
                   ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.997552, 0.5724496, 0.21803817142857146`], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[
                    0.6650346666666667, 0.3816330666666667, 
                    0.14535878095238097`], FrameTicks -> None, 
                    PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    "RGBColor[0.997552, 0.5724496, 0.21803817142857146]"], 
                    Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.997552, 0.5724496, 0.21803817142857146`]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.997552, 0.5724496, 0.21803817142857146`], 
                    Editable -> False, Selectable -> False]}], "]"}], ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.], FrameTicks -> None, 
                    PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], "GrayLevel[0]"], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0], Editable -> False, Selectable -> False], 
                    ",", 
                    RowBox[{"Opacity", "[", "0.5`", "]"}]}], "]"}], "]"}], 
                   ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.9691428571428572, 0.5341714285714286, 0.2], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[
                    0.6460952380952382, 0.35611428571428577`, 
                    0.13333333333333336`], FrameTicks -> None, 
                    PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    "RGBColor[0.9691428571428572, 0.5341714285714286, 0.2]"], 
                    Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.9691428571428572, 0.5341714285714286, 0.2]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.9691428571428572, 0.5341714285714286, 0.2], 
                    Editable -> False, Selectable -> False]}], "]"}], ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.], FrameTicks -> None, 
                    PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], "GrayLevel[0]"], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0], Editable -> False, Selectable -> False], 
                    ",", 
                    RowBox[{"Opacity", "[", "0.5`", "]"}]}], "]"}], "]"}], 
                   ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.9074285714285715, 0.5145142857142857, 0.2], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[
                    0.604952380952381, 0.3430095238095238, 
                    0.13333333333333336`], FrameTicks -> None, 
                    PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    "RGBColor[0.9074285714285715, 0.5145142857142857, 0.2]"], 
                    Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.9074285714285715, 0.5145142857142857, 0.2]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.9074285714285715, 0.5145142857142857, 0.2], 
                    Editable -> False, Selectable -> False]}], "]"}], ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.], FrameTicks -> None, 
                    PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], "GrayLevel[0]"], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0], Editable -> False, Selectable -> False], 
                    ",", 
                    RowBox[{"Opacity", "[", "0.5`", "]"}]}], "]"}], "]"}], 
                   ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.8457142857142858, 0.49485714285714283`, 0.2], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[
                    0.5638095238095239, 0.3299047619047619, 
                    0.13333333333333336`], FrameTicks -> None, 
                    PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    "RGBColor[0.8457142857142858, 0.49485714285714283, 0.2]"],
                     Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.8457142857142858, 0.49485714285714283`, 0.2]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.8457142857142858, 0.49485714285714283`, 0.2], 
                    Editable -> False, Selectable -> False]}], "]"}], ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.], FrameTicks -> None, 
                    PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], "GrayLevel[0]"], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0], Editable -> False, Selectable -> False], 
                    ",", 
                    RowBox[{"Opacity", "[", "0.5`", "]"}]}], "]"}], "]"}], 
                   ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.784, 0.47519999999999996`, 0.2], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[
                    0.5226666666666667, 0.31679999999999997`, 
                    0.13333333333333336`], FrameTicks -> None, 
                    PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    "RGBColor[0.784, 0.47519999999999996, 0.2]"], Appearance -> 
                    None, BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.784, 0.47519999999999996`, 0.2]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.784, 0.47519999999999996`, 0.2], Editable -> 
                    False, Selectable -> False]}], "]"}], ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.], FrameTicks -> None, 
                    PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], "GrayLevel[0]"], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0], Editable -> False, Selectable -> False], 
                    ",", 
                    RowBox[{"Opacity", "[", "0.5`", "]"}]}], "]"}], "]"}], 
                   ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[
                    0.7529888, 0.4779428571428571, 0.34927977142857136`], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[
                    0.5019925333333334, 0.3186285714285714, 
                    0.23285318095238092`], FrameTicks -> None, 
                    PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    "RGBColor[0.7529888, 0.4779428571428571, \
0.34927977142857136]"], Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[
                    0.7529888, 0.4779428571428571, 0.34927977142857136`]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[
                    0.7529888, 0.4779428571428571, 0.34927977142857136`], 
                    Editable -> False, Selectable -> False]}], "]"}], ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.], FrameTicks -> None, 
                    PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], "GrayLevel[0]"], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0], Editable -> False, Selectable -> False], 
                    ",", 
                    RowBox[{"Opacity", "[", "0.5`", "]"}]}], "]"}], "]"}], 
                   ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[
                    0.7219776, 0.48068571428571427`, 0.49855954285714277`], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[
                    0.48131840000000004`, 0.3204571428571429, 
                    0.33237302857142853`], FrameTicks -> None, 
                    PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    "RGBColor[0.7219776, 0.48068571428571427, \
0.49855954285714277]"], Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[
                    0.7219776, 0.48068571428571427`, 0.49855954285714277`]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[
                    0.7219776, 0.48068571428571427`, 0.49855954285714277`], 
                    Editable -> False, Selectable -> False]}], "]"}], ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.], FrameTicks -> None, 
                    PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], "GrayLevel[0]"], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0], Editable -> False, Selectable -> False], 
                    ",", 
                    RowBox[{"Opacity", "[", "0.5`", "]"}]}], "]"}], "]"}], 
                   ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[
                    0.6909664, 0.48342857142857143`, 0.6478393142857142], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[
                    0.4606442666666667, 0.3222857142857143, 
                    0.4318928761904761], FrameTicks -> None, PlotRangePadding -> 
                    None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    "RGBColor[0.6909664, 0.48342857142857143, \
0.6478393142857142]"], Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[
                    0.6909664, 0.48342857142857143`, 0.6478393142857142]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[
                    0.6909664, 0.48342857142857143`, 0.6478393142857142], 
                    Editable -> False, Selectable -> False]}], "]"}], ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.], FrameTicks -> None, 
                    PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], "GrayLevel[0]"], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0], Editable -> False, Selectable -> False], 
                    ",", 
                    RowBox[{"Opacity", "[", "0.5`", "]"}]}], "]"}], "]"}], 
                   ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[
                    0.6502806857142857, 0.4948571428571429, 
                    0.7379722285714285], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[
                    0.43352045714285714`, 0.3299047619047619, 
                    0.4919814857142857], FrameTicks -> None, PlotRangePadding -> 
                    None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    "RGBColor[0.6502806857142857, 0.4948571428571429, \
0.7379722285714285]"], Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[
                    0.6502806857142857, 0.4948571428571429, 
                    0.7379722285714285]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[
                    0.6502806857142857, 0.4948571428571429, 
                    0.7379722285714285], Editable -> False, Selectable -> 
                    False]}], "]"}], ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.], FrameTicks -> None, 
                    PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], "GrayLevel[0]"], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0], Editable -> False, Selectable -> False], 
                    ",", 
                    RowBox[{"Opacity", "[", "0.5`", "]"}]}], "]"}], "]"}], 
                   ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[
                    0.5999204571428571, 0.5149714285714285, 
                    0.7689582857142857], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[
                    0.39994697142857144`, 0.3433142857142857, 
                    0.5126388571428572], FrameTicks -> None, PlotRangePadding -> 
                    None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    "RGBColor[0.5999204571428571, 0.5149714285714285, \
0.7689582857142857]"], Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[
                    0.5999204571428571, 0.5149714285714285, 
                    0.7689582857142857]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[
                    0.5999204571428571, 0.5149714285714285, 
                    0.7689582857142857], Editable -> False, Selectable -> 
                    False]}], "]"}], ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.], FrameTicks -> None, 
                    PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], "GrayLevel[0]"], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0], Editable -> False, Selectable -> False], 
                    ",", 
                    RowBox[{"Opacity", "[", "0.5`", "]"}]}], "]"}], "]"}], 
                   ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[
                    0.5495602285714286, 0.5350857142857143, 
                    0.7999443428571428], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[
                    0.36637348571428574`, 0.35672380952380955`, 
                    0.5332962285714286], FrameTicks -> None, PlotRangePadding -> 
                    None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    "RGBColor[0.5495602285714286, 0.5350857142857143, \
0.7999443428571428]"], Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[
                    0.5495602285714286, 0.5350857142857143, 
                    0.7999443428571428]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[
                    0.5495602285714286, 0.5350857142857143, 
                    0.7999443428571428], Editable -> False, Selectable -> 
                    False]}], "]"}], ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.], FrameTicks -> None, 
                    PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], "GrayLevel[0]"], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0], Editable -> False, Selectable -> False], 
                    ",", 
                    RowBox[{"Opacity", "[", "0.5`", "]"}]}], "]"}], "]"}], 
                   ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.4992, 0.5552, 0.8309304], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[0.3328, 0.37013333333333337`, 0.5539536], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    "RGBColor[0.4992, 0.5552, 0.8309304]"], Appearance -> 
                    None, BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.4992, 0.5552, 0.8309304]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.4992, 0.5552, 0.8309304], Editable -> False, 
                    Selectable -> False]}], "]"}]}], "}"}], ",", 
           RowBox[{"{", 
             
             RowBox[{#, ",", #2, ",", #3, ",", #4, ",", #5, ",", #6, ",", #7, 
               ",", #8, ",", #9, ",", #10, ",", #11, ",", #12, ",", #13, 
               ",", #14, ",", #15}], "}"}], ",", 
           RowBox[{"LegendMarkers", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{"{", 
                 
                 RowBox[{
                  "None", ",", "None", ",", "None", ",", "None", ",", "None", 
                   ",", "None", ",", "None", ",", "None", ",", "None", ",", 
                   "None", ",", "None", ",", "None", ",", "None", ",", "None",
                    ",", "None"}], "}"}], "}"}]}], ",", 
           RowBox[{"LabelStyle", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{
                 InterpretationBox[
                  ButtonBox[
                   TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.], FrameTicks -> None, 
                    PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], "GrayLevel[0]"], Appearance -> None, 
                   BaseStyle -> {}, BaselinePosition -> Baseline, 
                   DefaultBaseStyle -> {}, ButtonFunction :> 
                   With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                   Automatic, Method -> "Preemptive"], 
                  GrayLevel[0], Editable -> False, Selectable -> False], ",", 
                 
                 RowBox[{"FontFamily", "\[Rule]", "\"Arial\""}]}], "}"}]}], 
           ",", 
           RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}]}], "]"}]& ), 
      Editable -> True], TraditionalForm], TraditionalForm]},
  "Legended",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"], 
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, GridBoxItemSize -> Automatic, 
    BaselinePosition -> {1, 1}]& ),
  Editable->True,
  InterpretationFunction->(RowBox[{"Legended", "[", 
     RowBox[{#, ",", 
       RowBox[{"Placed", "[", 
         RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]], "Print",
 CellLabel->"During evaluation of In[13]:=",
 CellID->2118098191]
}, Open  ]]
}, Open  ]],

Cell["We extract the time series across samples:", "ExampleText",
 CellID->630631678],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"bootstrapAllTimeSeries", "=", 
  RowBox[{"CreateTimeSeries", "@", "bootstrapFiltered"}]}]], "Input",
 CellLabel->"In[14]:=",
 CellID->1892186508],

Cell[BoxData[
 InterpretationBox[
  TagBox[
   FrameBox[GridBox[{
      {
       ItemBox[
        TagBox[
         RowBox[{"\[LeftAssociation]", 
          RowBox[{
           RowBox[{"2", "\[Rule]", 
            RowBox[{"{", 
             RowBox[{"1", ",", "1", ",", "1", ",", "1", ",", 
              RowBox[{"Missing", "[", "]"}], ",", "1", ",", "1", ",", 
              "8.87452`", ",", 
              RowBox[{"Missing", "[", "]"}], ",", "1", ",", 
              RowBox[{"Missing", "[", "]"}], ",", "9.15657`", ",", "32.1935`",
               ",", "1", ",", "15.6865`"}], "}"}]}], ",", 
           TemplateBox[{"880"},
            "OutputSizeLimit`Skeleton",
            DisplayFunction->(FrameBox[
              RowBox[{"\" \[CenterEllipsis]\"", #, "\"\[CenterEllipsis] \""}],
               Background -> GrayLevel[0.75], 
              BaseStyle -> {
               "Deploy", FontColor -> GrayLevel[1], FontSize -> Smaller, 
                ShowStringCharacters -> False}, BaselinePosition -> Baseline, 
              ContentPadding -> False, FrameMargins -> 1, FrameStyle -> 
              GrayLevel[0.75], RoundingRadius -> 7]& )], ",", 
           RowBox[{"19976", "\[Rule]", 
            RowBox[{"{", 
             RowBox[{
             "13.7713`", ",", "10.2886`", ",", "7.66842`", ",", "51.8244`", 
              ",", "1", ",", "1", ",", "13.9249`", ",", "10.5773`", ",", 
              RowBox[{"Missing", "[", "]"}], ",", "18.9217`", ",", "1", ",", 
              RowBox[{"Missing", "[", "]"}], ",", "7.90121`", ",", "1", ",", 
              "19.3487`"}], "}"}]}]}], "\[RightAssociation]"}],
         Short[#, 5]& ],
        BaseStyle->{Deployed -> False},
        StripOnInput->False]},
      {GridBox[{
         {
          TagBox[
           TooltipBox[
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource[
                "FEStrings", "sizeBriefExplanation"], StandardForm],
               ImageSizeCache->{59., {2., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "SuggestionsBarCategory",
             StripOnInput->False],
            StyleBox[
             DynamicBox[
              ToBoxes[
               FEPrivate`FrontEndResource["FEStrings", "sizeExplanation"], 
               StandardForm]], DynamicUpdating -> True, StripOnInput -> 
             False]],
           Annotation[#, 
            Style[
             Dynamic[
              FEPrivate`FrontEndResource["FEStrings", "sizeExplanation"]], 
             DynamicUpdating -> True], "Tooltip"]& ], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowLess"], 
                StandardForm],
               ImageSizeCache->{51., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "SuggestionsBarControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowLess"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "SuggestionsBarControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            Identity, 14, 32690409551196737160, 5/2],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowMore"], 
                StandardForm],
               ImageSizeCache->{56., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "SuggestionsBarControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowMore"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "SuggestionsBarControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            Identity, 14, 32690409551196737160, 5 2],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowAll"], 
                StandardForm],
               ImageSizeCache->{42., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "SuggestionsBarControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowAll"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "SuggestionsBarControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            Identity, 14, 32690409551196737160, Infinity],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeChangeLimit"], 
                StandardForm],
               ImageSizeCache->{77., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "SuggestionsBarControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeChangeLimit"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "SuggestionsBarControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           ButtonFunction:>FrontEndExecute[{
              FrontEnd`SetOptions[
              FrontEnd`$FrontEnd, 
               FrontEnd`PreferencesSettings -> {"Page" -> "Evaluation"}], 
              FrontEnd`FrontEndToken["PreferencesDialog"]}],
           Evaluator->None,
           Method->"Preemptive"]}
        },
        AutoDelete->False,
        FrameStyle->GrayLevel[0.85],
        GridBoxDividers->{"Columns" -> {False, {True}}},
        GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
        GridBoxSpacings->{"Columns" -> {{2}}}]}
     },
     DefaultBaseStyle->"Column",
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}},
     GridBoxDividers->{
      "Columns" -> {{False}}, "ColumnsIndexed" -> {}, "Rows" -> {{False}}, 
       "RowsIndexed" -> {}},
     GridBoxItemSize->{
      "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
       "RowsIndexed" -> {}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.5599999999999999]}, 
         Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
         Offset[0.2], 
         Offset[1.2], {
          Offset[0.4]}, 
         Offset[0.2]}, "RowsIndexed" -> {}}],
    Background->RGBColor[0.9657, 0.9753, 0.9802],
    FrameMargins->{{12, 12}, {0, 15}},
    FrameStyle->GrayLevel[0.85],
    RoundingRadius->5,
    StripOnInput->False],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  Out[14]]], "Output",
 CellLabel->"Out[14]=",
 CellID->1689603943]
}, Open  ]],

Cell["We take the Log across samples :", "ExampleText",
 CellID->2087257694],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"bootstrapLogTransformed", "=", 
  RowBox[{"SeriesApplier", "[", 
   RowBox[{"Log", ",", "bootstrapAllTimeSeries"}], "]"}]}]], "Input",
 CellLabel->"In[15]:=",
 CellID->1376004265],

Cell[BoxData[
 InterpretationBox[
  TagBox[
   FrameBox[GridBox[{
      {
       ItemBox[
        TagBox[
         RowBox[{"\[LeftAssociation]", 
          RowBox[{
           RowBox[{"2", "\[Rule]", 
            RowBox[{"{", 
             RowBox[{"0", ",", "0", ",", "0", ",", "0", ",", 
              RowBox[{"Missing", "[", "]"}], ",", "0", ",", "0", ",", 
              "2.1831842493918177`", ",", 
              RowBox[{"Missing", "[", "]"}], ",", "0", ",", 
              RowBox[{"Missing", "[", "]"}], ",", "2.2144716544121064`", ",", 
              "3.471764568819176`", ",", "0", ",", "2.7528004698402824`"}], 
             "}"}]}], ",", 
           TemplateBox[{"880"},
            "OutputSizeLimit`Skeleton",
            DisplayFunction->(FrameBox[
              RowBox[{"\" \[CenterEllipsis]\"", #, "\"\[CenterEllipsis] \""}],
               Background -> GrayLevel[0.75], 
              BaseStyle -> {
               "Deploy", FontColor -> GrayLevel[1], FontSize -> Smaller, 
                ShowStringCharacters -> False}, BaselinePosition -> Baseline, 
              ContentPadding -> False, FrameMargins -> 1, FrameStyle -> 
              GrayLevel[0.75], RoundingRadius -> 7]& )], ",", 
           RowBox[{"19976", "\[Rule]", 
            RowBox[{"{", 
             RowBox[{
             "2.62258671641802`", ",", "2.3310364861679473`", ",", 
              "2.03711059676635`", ",", 
              TemplateBox[{"9"},
               "OutputSizeLimit`Skeleton",
               DisplayFunction->(FrameBox[
                 
                 RowBox[{
                  "\" \[CenterEllipsis]\"", #, "\"\[CenterEllipsis] \""}], 
                 Background -> GrayLevel[0.75], 
                 BaseStyle -> {
                  "Deploy", FontColor -> GrayLevel[1], FontSize -> Smaller, 
                   ShowStringCharacters -> False}, BaselinePosition -> 
                 Baseline, ContentPadding -> False, FrameMargins -> 1, 
                 FrameStyle -> GrayLevel[0.75], RoundingRadius -> 7]& )], ",",
               "2.0670159123014447`", ",", "0", ",", "2.9626252337563486`"}], 
             "}"}]}]}], "\[RightAssociation]"}],
         Short[#, 5]& ],
        BaseStyle->{Deployed -> False},
        StripOnInput->False]},
      {GridBox[{
         {
          TagBox[
           TooltipBox[
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource[
                "FEStrings", "sizeBriefExplanation"], StandardForm],
               ImageSizeCache->{59., {2., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "SuggestionsBarCategory",
             StripOnInput->False],
            StyleBox[
             DynamicBox[
              ToBoxes[
               FEPrivate`FrontEndResource["FEStrings", "sizeExplanation"], 
               StandardForm]], DynamicUpdating -> True, StripOnInput -> 
             False]],
           Annotation[#, 
            Style[
             Dynamic[
              FEPrivate`FrontEndResource["FEStrings", "sizeExplanation"]], 
             DynamicUpdating -> True], "Tooltip"]& ], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowLess"], 
                StandardForm],
               ImageSizeCache->{51., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "SuggestionsBarControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowLess"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "SuggestionsBarControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            Identity, 15, 32690409551196737160, 5/2],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowMore"], 
                StandardForm],
               ImageSizeCache->{56., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "SuggestionsBarControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowMore"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "SuggestionsBarControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            Identity, 15, 32690409551196737160, 5 2],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowAll"], 
                StandardForm],
               ImageSizeCache->{42., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "SuggestionsBarControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowAll"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "SuggestionsBarControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            Identity, 15, 32690409551196737160, Infinity],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeChangeLimit"], 
                StandardForm],
               ImageSizeCache->{77., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "SuggestionsBarControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeChangeLimit"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "SuggestionsBarControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           ButtonFunction:>FrontEndExecute[{
              FrontEnd`SetOptions[
              FrontEnd`$FrontEnd, 
               FrontEnd`PreferencesSettings -> {"Page" -> "Evaluation"}], 
              FrontEnd`FrontEndToken["PreferencesDialog"]}],
           Evaluator->None,
           Method->"Preemptive"]}
        },
        AutoDelete->False,
        FrameStyle->GrayLevel[0.85],
        GridBoxDividers->{"Columns" -> {False, {True}}},
        GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
        GridBoxSpacings->{"Columns" -> {{2}}}]}
     },
     DefaultBaseStyle->"Column",
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}},
     GridBoxDividers->{
      "Columns" -> {{False}}, "ColumnsIndexed" -> {}, "Rows" -> {{False}}, 
       "RowsIndexed" -> {}},
     GridBoxItemSize->{
      "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
       "RowsIndexed" -> {}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.5599999999999999]}, 
         Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
         Offset[0.2], 
         Offset[1.2], {
          Offset[0.4]}, 
         Offset[0.2]}, "RowsIndexed" -> {}}],
    Background->RGBColor[0.9657, 0.9753, 0.9802],
    FrameMargins->{{12, 12}, {0, 15}},
    FrameStyle->GrayLevel[0.85],
    RoundingRadius->5,
    StripOnInput->False],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  Out[15]]], "Output",
 CellLabel->"Out[15]=",
 CellID->70476615]
}, Open  ]],

Cell["\<\
We compare the datasets to the reference datapoint. Let's select the second \
point as a reference: \
\>", "ExampleText",
 CellID->1146032319],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"bootstrapRatios", "=", 
  RowBox[{"SeriesInternalCompare", "[", 
   RowBox[{"bootstrapLogTransformed", ",", 
    RowBox[{"ComparisonIndex", "\[Rule]", "2"}]}], "]"}]}]], "Input",
 CellLabel->"In[16]:=",
 CellID->806436591],

Cell[BoxData[
 InterpretationBox[
  TagBox[
   FrameBox[GridBox[{
      {
       ItemBox[
        TagBox[
         RowBox[{"\[LeftAssociation]", 
          RowBox[{
           RowBox[{"2", "\[Rule]", 
            RowBox[{"{", 
             RowBox[{"0", ",", "0", ",", "0", ",", "0", ",", 
              RowBox[{"Missing", "[", "]"}], ",", "0", ",", "0", ",", 
              "2.1831842493918177`", ",", 
              RowBox[{"Missing", "[", "]"}], ",", "0", ",", 
              RowBox[{"Missing", "[", "]"}], ",", "2.2144716544121064`", ",", 
              "3.471764568819176`", ",", "0", ",", "2.7528004698402824`"}], 
             "}"}]}], ",", 
           RowBox[{"48", "\[Rule]", 
            RowBox[{"{", 
             TemplateBox[{"1"},
              "OutputSizeLimit`Skeleton",
              DisplayFunction->(FrameBox[
                
                RowBox[{
                 "\" \[CenterEllipsis]\"", #, "\"\[CenterEllipsis] \""}], 
                Background -> GrayLevel[0.75], 
                BaseStyle -> {
                 "Deploy", FontColor -> GrayLevel[1], FontSize -> Smaller, 
                  ShowStringCharacters -> False}, BaselinePosition -> 
                Baseline, ContentPadding -> False, FrameMargins -> 1, 
                FrameStyle -> GrayLevel[0.75], RoundingRadius -> 7]& )], 
             "}"}]}], ",", 
           TemplateBox[{"721"},
            "OutputSizeLimit`Skeleton",
            DisplayFunction->(FrameBox[
              RowBox[{"\" \[CenterEllipsis]\"", #, "\"\[CenterEllipsis] \""}],
               Background -> GrayLevel[0.75], 
              BaseStyle -> {
               "Deploy", FontColor -> GrayLevel[1], FontSize -> Smaller, 
                ShowStringCharacters -> False}, BaselinePosition -> Baseline, 
              ContentPadding -> False, FrameMargins -> 1, FrameStyle -> 
              GrayLevel[0.75], RoundingRadius -> 7]& )], ",", 
           RowBox[{"19891", "\[Rule]", 
            TemplateBox[{"1"},
             "OutputSizeLimit`Skeleton",
             DisplayFunction->(FrameBox[
               
               RowBox[{
                "\" \[CenterEllipsis]\"", #, "\"\[CenterEllipsis] \""}], 
               Background -> GrayLevel[0.75], 
               BaseStyle -> {
                "Deploy", FontColor -> GrayLevel[1], FontSize -> Smaller, 
                 ShowStringCharacters -> False}, BaselinePosition -> Baseline,
                ContentPadding -> False, FrameMargins -> 1, FrameStyle -> 
               GrayLevel[0.75], RoundingRadius -> 7]& )]}], ",", 
           RowBox[{"19976", "\[Rule]", 
            RowBox[{"{", 
             RowBox[{"0.29155023025007276`", ",", "0.`", ",", 
              TemplateBox[{"11"},
               "OutputSizeLimit`Skeleton",
               DisplayFunction->(FrameBox[
                 
                 RowBox[{
                  "\" \[CenterEllipsis]\"", #, "\"\[CenterEllipsis] \""}], 
                 Background -> GrayLevel[0.75], 
                 BaseStyle -> {
                  "Deploy", FontColor -> GrayLevel[1], FontSize -> Smaller, 
                   ShowStringCharacters -> False}, BaselinePosition -> 
                 Baseline, ContentPadding -> False, FrameMargins -> 1, 
                 FrameStyle -> GrayLevel[0.75], RoundingRadius -> 7]& )], ",", 
              RowBox[{"-", "2.3310364861679473`"}], ",", 
              "0.6315887475884012`"}], "}"}]}]}], "\[RightAssociation]"}],
         Short[#, 5]& ],
        BaseStyle->{Deployed -> False},
        StripOnInput->False]},
      {GridBox[{
         {
          TagBox[
           TooltipBox[
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource[
                "FEStrings", "sizeBriefExplanation"], StandardForm],
               ImageSizeCache->{59., {2., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "SuggestionsBarCategory",
             StripOnInput->False],
            StyleBox[
             DynamicBox[
              ToBoxes[
               FEPrivate`FrontEndResource["FEStrings", "sizeExplanation"], 
               StandardForm]], DynamicUpdating -> True, StripOnInput -> 
             False]],
           Annotation[#, 
            Style[
             Dynamic[
              FEPrivate`FrontEndResource["FEStrings", "sizeExplanation"]], 
             DynamicUpdating -> True], "Tooltip"]& ], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowLess"], 
                StandardForm],
               ImageSizeCache->{51., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "SuggestionsBarControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowLess"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "SuggestionsBarControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            Identity, 16, 32690409551196737160, 5/2],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowMore"], 
                StandardForm],
               ImageSizeCache->{56., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "SuggestionsBarControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowMore"], 
                StandardForm],
               ImageSizeCache->{54., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "SuggestionsBarControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            Identity, 16, 32690409551196737160, 5 2],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowAll"], 
                StandardForm],
               ImageSizeCache->{42., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "SuggestionsBarControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowAll"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "SuggestionsBarControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            Identity, 16, 32690409551196737160, Infinity],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeChangeLimit"], 
                StandardForm],
               ImageSizeCache->{77., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "SuggestionsBarControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeChangeLimit"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "SuggestionsBarControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           ButtonFunction:>FrontEndExecute[{
              FrontEnd`SetOptions[
              FrontEnd`$FrontEnd, 
               FrontEnd`PreferencesSettings -> {"Page" -> "Evaluation"}], 
              FrontEnd`FrontEndToken["PreferencesDialog"]}],
           Evaluator->None,
           Method->"Preemptive"]}
        },
        AutoDelete->False,
        FrameStyle->GrayLevel[0.85],
        GridBoxDividers->{"Columns" -> {False, {True}}},
        GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
        GridBoxSpacings->{"Columns" -> {{2}}}]}
     },
     DefaultBaseStyle->"Column",
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}},
     GridBoxDividers->{
      "Columns" -> {{False}}, "ColumnsIndexed" -> {}, "Rows" -> {{False}}, 
       "RowsIndexed" -> {}},
     GridBoxItemSize->{
      "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
       "RowsIndexed" -> {}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.5599999999999999]}, 
         Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
         Offset[0.2], 
         Offset[1.2], {
          Offset[0.4]}, 
         Offset[0.2]}, "RowsIndexed" -> {}}],
    Background->RGBColor[0.9657, 0.9753, 0.9802],
    FrameMargins->{{12, 12}, {0, 15}},
    FrameStyle->GrayLevel[0.85],
    RoundingRadius->5,
    StripOnInput->False],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  Out[16]]], "Output",
 CellLabel->"Out[16]=",
 CellID->113639449]
}, Open  ]],

Cell["We now normalize each time series as a vector:", "ExampleText",
 CellID->1578738512],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"bootstrapNormed", "=", 
  RowBox[{"SeriesApplier", "[", 
   RowBox[{"Normalize", ",", "bootstrapRatios"}], "]"}]}]], "Input",
 CellLabel->"In[17]:=",
 CellID->96638786],

Cell[BoxData[
 InterpretationBox[
  TagBox[
   FrameBox[GridBox[{
      {
       ItemBox[
        TagBox[
         RowBox[{"\[LeftAssociation]", 
          RowBox[{
           RowBox[{"2", "\[Rule]", 
            RowBox[{"{", 
             RowBox[{"0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", 
              RowBox[{"Missing", "[", "]"}], ",", "0.`", ",", "0.`", ",", 
              "0.4033178150431934`", ",", 
              RowBox[{"Missing", "[", "]"}], ",", "0.`", ",", 
              RowBox[{"Missing", "[", "]"}], ",", "0.4090977980357739`", ",", 
              "0.6413679929353618`", ",", "0.`", ",", "0.5085477650615832`"}],
              "}"}]}], ",", 
           TemplateBox[{"723"},
            "OutputSizeLimit`Skeleton",
            DisplayFunction->(FrameBox[
              RowBox[{"\" \[CenterEllipsis]\"", #, "\"\[CenterEllipsis] \""}],
               Background -> GrayLevel[0.75], 
              BaseStyle -> {
               "Deploy", FontColor -> GrayLevel[1], FontSize -> Smaller, 
                ShowStringCharacters -> False}, BaselinePosition -> Baseline, 
              ContentPadding -> False, FrameMargins -> 1, FrameStyle -> 
              GrayLevel[0.75], RoundingRadius -> 7]& )], ",", 
           RowBox[{"19976", "\[Rule]", 
            RowBox[{"{", 
             RowBox[{"0.057789257821976095`", ",", "0.`", ",", 
              TemplateBox[{"11"},
               "OutputSizeLimit`Skeleton",
               DisplayFunction->(FrameBox[
                 
                 RowBox[{
                  "\" \[CenterEllipsis]\"", #, "\"\[CenterEllipsis] \""}], 
                 Background -> GrayLevel[0.75], 
                 BaseStyle -> {
                  "Deploy", FontColor -> GrayLevel[1], FontSize -> Smaller, 
                   ShowStringCharacters -> False}, BaselinePosition -> 
                 Baseline, ContentPadding -> False, FrameMargins -> 1, 
                 FrameStyle -> GrayLevel[0.75], RoundingRadius -> 7]& )], ",", 
              RowBox[{"-", "0.46204343030718326`"}], ",", 
              "0.12518955975626772`"}], "}"}]}]}], "\[RightAssociation]"}],
         Short[#, 5]& ],
        BaseStyle->{Deployed -> False},
        StripOnInput->False]},
      {GridBox[{
         {
          TagBox[
           TooltipBox[
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource[
                "FEStrings", "sizeBriefExplanation"], StandardForm],
               ImageSizeCache->{59., {2., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "SuggestionsBarCategory",
             StripOnInput->False],
            StyleBox[
             DynamicBox[
              ToBoxes[
               FEPrivate`FrontEndResource["FEStrings", "sizeExplanation"], 
               StandardForm]], DynamicUpdating -> True, StripOnInput -> 
             False]],
           Annotation[#, 
            Style[
             Dynamic[
              FEPrivate`FrontEndResource["FEStrings", "sizeExplanation"]], 
             DynamicUpdating -> True], "Tooltip"]& ], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowLess"], 
                StandardForm],
               ImageSizeCache->{51., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "SuggestionsBarControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowLess"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "SuggestionsBarControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            Identity, 17, 32690409551196737160, 5/2],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowMore"], 
                StandardForm],
               ImageSizeCache->{56., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "SuggestionsBarControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowMore"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "SuggestionsBarControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            Identity, 17, 32690409551196737160, 5 2],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowAll"], 
                StandardForm],
               ImageSizeCache->{42., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "SuggestionsBarControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowAll"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "SuggestionsBarControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            Identity, 17, 32690409551196737160, Infinity],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeChangeLimit"], 
                StandardForm],
               ImageSizeCache->{77., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "SuggestionsBarControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeChangeLimit"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "SuggestionsBarControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           ButtonFunction:>FrontEndExecute[{
              FrontEnd`SetOptions[
              FrontEnd`$FrontEnd, 
               FrontEnd`PreferencesSettings -> {"Page" -> "Evaluation"}], 
              FrontEnd`FrontEndToken["PreferencesDialog"]}],
           Evaluator->None,
           Method->"Preemptive"]}
        },
        AutoDelete->False,
        FrameStyle->GrayLevel[0.85],
        GridBoxDividers->{"Columns" -> {False, {True}}},
        GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
        GridBoxSpacings->{"Columns" -> {{2}}}]}
     },
     DefaultBaseStyle->"Column",
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}},
     GridBoxDividers->{
      "Columns" -> {{False}}, "ColumnsIndexed" -> {}, "Rows" -> {{False}}, 
       "RowsIndexed" -> {}},
     GridBoxItemSize->{
      "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
       "RowsIndexed" -> {}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.5599999999999999]}, 
         Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
         Offset[0.2], 
         Offset[1.2], {
          Offset[0.4]}, 
         Offset[0.2]}, "RowsIndexed" -> {}}],
    Background->RGBColor[0.9657, 0.9753, 0.9802],
    FrameMargins->{{12, 12}, {0, 15}},
    FrameStyle->GrayLevel[0.85],
    RoundingRadius->5,
    StripOnInput->False],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  Out[17]]], "Output",
 CellLabel->"Out[17]=",
 CellID->1647695794]
}, Open  ]],

Cell["Next we remove constant series:", "ExampleText",
 CellID->2035432211],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"bootstrapFinal", "=", 
  RowBox[{"ConstantSeriesClean", "[", "bootstrapNormed", "]"}]}]], "Input",
 CellLabel->"In[18]:=",
 CellID->2135057265],

Cell[BoxData[
 InterpretationBox[
  TagBox[
   FrameBox[GridBox[{
      {
       ItemBox[
        TagBox[
         RowBox[{"\[LeftAssociation]", 
          RowBox[{
           RowBox[{"2", "\[Rule]", 
            RowBox[{"{", 
             RowBox[{"0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", 
              RowBox[{"Missing", "[", "]"}], ",", "0.`", ",", "0.`", ",", 
              "0.4033178150431934`", ",", 
              RowBox[{"Missing", "[", "]"}], ",", "0.`", ",", 
              RowBox[{"Missing", "[", "]"}], ",", "0.4090977980357739`", ",", 
              "0.6413679929353618`", ",", "0.`", ",", "0.5085477650615832`"}],
              "}"}]}], ",", 
           TemplateBox[{"723"},
            "OutputSizeLimit`Skeleton",
            DisplayFunction->(FrameBox[
              RowBox[{"\" \[CenterEllipsis]\"", #, "\"\[CenterEllipsis] \""}],
               Background -> GrayLevel[0.75], 
              BaseStyle -> {
               "Deploy", FontColor -> GrayLevel[1], FontSize -> Smaller, 
                ShowStringCharacters -> False}, BaselinePosition -> Baseline, 
              ContentPadding -> False, FrameMargins -> 1, FrameStyle -> 
              GrayLevel[0.75], RoundingRadius -> 7]& )], ",", 
           RowBox[{"19976", "\[Rule]", 
            RowBox[{"{", 
             RowBox[{"0.057789257821976095`", ",", "0.`", ",", 
              TemplateBox[{"11"},
               "OutputSizeLimit`Skeleton",
               DisplayFunction->(FrameBox[
                 
                 RowBox[{
                  "\" \[CenterEllipsis]\"", #, "\"\[CenterEllipsis] \""}], 
                 Background -> GrayLevel[0.75], 
                 BaseStyle -> {
                  "Deploy", FontColor -> GrayLevel[1], FontSize -> Smaller, 
                   ShowStringCharacters -> False}, BaselinePosition -> 
                 Baseline, ContentPadding -> False, FrameMargins -> 1, 
                 FrameStyle -> GrayLevel[0.75], RoundingRadius -> 7]& )], ",", 
              RowBox[{"-", "0.46204343030718326`"}], ",", 
              "0.12518955975626772`"}], "}"}]}]}], "\[RightAssociation]"}],
         Short[#, 5]& ],
        BaseStyle->{Deployed -> False},
        StripOnInput->False]},
      {GridBox[{
         {
          TagBox[
           TooltipBox[
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource[
                "FEStrings", "sizeBriefExplanation"], StandardForm],
               ImageSizeCache->{59., {2., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "SuggestionsBarCategory",
             StripOnInput->False],
            StyleBox[
             DynamicBox[
              ToBoxes[
               FEPrivate`FrontEndResource["FEStrings", "sizeExplanation"], 
               StandardForm]], DynamicUpdating -> True, StripOnInput -> 
             False]],
           Annotation[#, 
            Style[
             Dynamic[
              FEPrivate`FrontEndResource["FEStrings", "sizeExplanation"]], 
             DynamicUpdating -> True], "Tooltip"]& ], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowLess"], 
                StandardForm],
               ImageSizeCache->{51., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "SuggestionsBarControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowLess"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "SuggestionsBarControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            Identity, 18, 32690409551196737160, 5/2],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowMore"], 
                StandardForm],
               ImageSizeCache->{56., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "SuggestionsBarControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowMore"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "SuggestionsBarControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            Identity, 18, 32690409551196737160, 5 2],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowAll"], 
                StandardForm],
               ImageSizeCache->{42., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "SuggestionsBarControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowAll"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "SuggestionsBarControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            Identity, 18, 32690409551196737160, Infinity],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeChangeLimit"], 
                StandardForm],
               ImageSizeCache->{77., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "SuggestionsBarControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeChangeLimit"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "SuggestionsBarControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           ButtonFunction:>FrontEndExecute[{
              FrontEnd`SetOptions[
              FrontEnd`$FrontEnd, 
               FrontEnd`PreferencesSettings -> {"Page" -> "Evaluation"}], 
              FrontEnd`FrontEndToken["PreferencesDialog"]}],
           Evaluator->None,
           Method->"Preemptive"]}
        },
        AutoDelete->False,
        FrameStyle->GrayLevel[0.85],
        GridBoxDividers->{"Columns" -> {False, {True}}},
        GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
        GridBoxSpacings->{"Columns" -> {{2}}}]}
     },
     DefaultBaseStyle->"Column",
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}},
     GridBoxDividers->{
      "Columns" -> {{False}}, "ColumnsIndexed" -> {}, "Rows" -> {{False}}, 
       "RowsIndexed" -> {}},
     GridBoxItemSize->{
      "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
       "RowsIndexed" -> {}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.5599999999999999]}, 
         Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
         Offset[0.2], 
         Offset[1.2], {
          Offset[0.4]}, 
         Offset[0.2]}, "RowsIndexed" -> {}}],
    Background->RGBColor[0.9657, 0.9753, 0.9802],
    FrameMargins->{{12, 12}, {0, 15}},
    FrameStyle->GrayLevel[0.85],
    RoundingRadius->5,
    StripOnInput->False],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  Out[18]]], "Output",
 CellLabel->"Out[18]=",
 CellID->591756486]
}, Open  ]],

Cell["In this example no series was removed.", "ExampleText",
 CellID->1596932119],

Cell["\<\
Let's extract the time series information that that was encoded in the outer \
association keys when this OmicsObject was originally created. The samples \
were numbered as follows:\
\>", "ExampleText",
 CellID->1626515394],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"bootstrapSamplesIndexes", "=", 
  RowBox[{"TimeExtractor", "[", "bootstrapSets", "]"}]}]], "Input",
 CellLabel->"In[19]:=",
 CellID->1769405766],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "7", ",", "8", ",", "9", ",", "10", ",", "11", ",", "12", ",", "13", ",", 
   "14", ",", "15", ",", "16", ",", "17", ",", "18", ",", "19", ",", "20", 
   ",", "21"}], "}"}]], "Output",
 CellLabel->"Out[19]=",
 CellID->618072681]
}, Open  ]],

Cell["\<\
The associated timepoints for each of the samples are actually given below as \
a sample\[Rule] day association:\
\>", "ExampleText",
 CellID->1288167328],

Cell[BoxData[
 RowBox[{
  RowBox[{"timeCorrespondence", "=", 
   RowBox[{"\[LeftAssociation]", 
    RowBox[{
     RowBox[{"7", "\[Rule]", "186"}], ",", 
     RowBox[{"8", "\[Rule]", "255"}], ",", 
     RowBox[{"9", "\[Rule]", "289"}], ",", 
     RowBox[{"10", "\[Rule]", "290"}], ",", 
     RowBox[{"11", "\[Rule]", "292"}], ",", 
     RowBox[{"12", "\[Rule]", "294"}], ",", 
     RowBox[{"13", "\[Rule]", "297"}], ",", 
     RowBox[{"14", "\[Rule]", "301"}], ",", 
     RowBox[{"15", "\[Rule]", "307"}], ",", 
     RowBox[{"16", "\[Rule]", "311"}], ",", 
     RowBox[{"17", "\[Rule]", "322"}], ",", 
     RowBox[{"18", "\[Rule]", "329"}], ",", 
     RowBox[{"19", "\[Rule]", "369"}], ",", 
     RowBox[{"20", "\[Rule]", "380"}], ",", 
     RowBox[{"21", "\[Rule]", "400"}]}], "\[RightAssociation]"}]}], 
  ";"}]], "Input",
 CellLabel->"In[20]:=",
 CellID->950392958],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"bootstrapSamplesTimes", "=", 
  RowBox[{
   RowBox[{
    RowBox[{"timeCorrespondence", "[", "#", "]"}], "&"}], "/@", " ", 
   "bootstrapSamplesIndexes"}]}]], "Input",
 CellLabel->"In[21]:=",
 CellID->544095634],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "186", ",", "255", ",", "289", ",", "290", ",", "292", ",", "294", ",", 
   "297", ",", "301", ",", "307", ",", "311", ",", "322", ",", "329", ",", 
   "369", ",", "380", ",", "400"}], "}"}]], "Output",
 CellLabel->"Out[21]=",
 CellID->150975640]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "Application of QuantileEstimator to Extended Example Data",
 "\[NonBreakingSpace]\[NonBreakingSpace]",
 Cell["(1)", "ExampleCount"]
}], "ExampleSection",
 WholeCellGroupOpener->True,
 CellID->1562605548],

Cell[TextData[{
 "Now we perform a calculation of the ",
 Cell[BoxData[
  TemplateBox[{
    Cell[
     TextData["LombScargle"]], "paclet:MathIOmica/ref/LombScargle"},
   "RefLink",
   BaseStyle->{"InlineFormula"}]], "InlineFormula"],
 " periodograms and extract the 0.95 quantile value:"
}], "ExampleText",
 CellID->17097794],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"bootstrapQ95", "=", 
  RowBox[{"QuantileEstimator", "[", 
   RowBox[{"bootstrapFinal", ",", "bootstrapSamplesTimes"}], "]"}]}]], "Input",\

 CellLabel->"In[22]:=",
 CellID->1415065210],

Cell[BoxData["0.8597898379825988`"], "Output",
 CellLabel->"Out[22]=",
 CellID->89198783]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "Options",
 "\[NonBreakingSpace]\[NonBreakingSpace]",
 Cell["(7)", "ExampleCount"]
}], "ExampleSection", "ExampleSection",
 WholeCellGroupOpener->True],

Cell[BoxData[
 RowBox[{"Needs", "[", "\"\<MathIOmica`\>\"", "]"}]], "Input",
 CellLabel->"In[1]:=",
 CellID->1321477493],

Cell["\<\
N.B. The examples below utilize the data simulated in the main examples \
above.  if you are evaluating the examples below, please evaluate the \
appropriate cells to create the data before proceeding.\
\>", "ExampleText",
 CellID->832831966],

Cell[CellGroupData[{

Cell[TextData[{
 "AutocorrelationOptions",
 "\[NonBreakingSpace]\[NonBreakingSpace]",
 Cell["(1)", "ExampleCount"]
}], "ExampleSubsection", "ExampleSubsection",
 WholeCellGroupOpener->True],

Cell[TextData[{
 "AutocorrelationOptions allows us to pass options for the internal ",
 Cell[BoxData[
  TemplateBox[{
    Cell[
     TextData["Autocorrelation"]], "paclet:MathIOmica/ref/Autocorrelation"},
   "RefLink",
   BaseStyle->{"InlineFormula"}]], "InlineFormula"],
 " function used. This assumes the Method option has been set for \
\"Autocorrelation\":"
}], "ExampleText",
 CellID->267670933],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"bootstrapAutocorrelationOpts", "=", 
  RowBox[{"QuantileEstimator", "[", 
   RowBox[{"bootstrapFinal", ",", "bootstrapSamplesTimes", ",", 
    RowBox[{"Method", "\[Rule]", "\"\<Autocorrelation\>\""}], ",", 
    RowBox[{"AutocorrelationOptions", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{"UpperFrequencyFactor", "\[Rule]", "1"}], "}"}]}]}], " ", 
   "]"}]}]], "Input",
 CellLabel->"In[1]:=",
 CellID->1087404876],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.06622088774816004`", ",", "0.813067161519365`", ",", 
   "0.2518337898727185`", ",", "0.5628950213075871`", ",", 
   "0.40263529741258103`", ",", "0.4800410257202947`", ",", 
   "0.2848049777134134`"}], "}"}]], "Output",
 CellLabel->"Out[1]=",
 CellID->1333334497]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 "InterpolationDeltaT",
 "\[NonBreakingSpace]\[NonBreakingSpace]",
 Cell["(1)", "ExampleCount"]
}], "ExampleSubsection", "ExampleSubsection",
 WholeCellGroupOpener->True,
 CellID->82508222],

Cell["\<\
InterpolationDeltaT allows us to explicitly set the time step for the \
interpolation used. This assumes the Method option has been set for \
\"InterpolatedAutocorrelation\". For example we can change set the time step \
to 25 in our example\
\>", "ExampleText",
 CellID->1588734839],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"bootstrapLombScargleOpts", "=", 
  RowBox[{"QuantileEstimator", "[", 
   RowBox[{"bootstrapFinal", ",", "bootstrapSamplesTimes", ",", 
    RowBox[{"Method", "\[Rule]", "\"\<InterpolatedAutocorrelation\>\""}], ",", 
    RowBox[{"InterpolationDeltaT", "\[Rule]", "25"}]}], "]"}]}]], "Input",
 CellLabel->"In[1]:=",
 CellID->54772275],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.3364193909262763`", ",", "0.054623974318983214`", ",", 
   "0.010451947738060923`", ",", "0.09973170786146333`", ",", 
   "0.08421456987829974`", ",", "0.06464959438650979`", ",", 
   "0.050370430965584474`", ",", "0.04572358754003292`"}], "}"}]], "Output",
 CellLabel->"Out[1]=",
 CellID->1267790863]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 "InterpolationOptions",
 "\[NonBreakingSpace]\[NonBreakingSpace]",
 Cell["(1)", "ExampleCount"]
}], "ExampleSubsection", "ExampleSubsection",
 WholeCellGroupOpener->True,
 CellID->1452445506],

Cell[TextData[{
 "InterpolationOptions allows us to pass options for the internal \
Interpolation function used. This assumes the Method option has been set for \
\"InterpolatedAutocorrelation\". For example we can change the ",
 ButtonBox["InterpolationOrder",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/InterpolationOrder"],
 " option:"
}], "ExampleText",
 CellID->805003893],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"bootstrapLombScargleOpts", "=", 
  RowBox[{"QuantileEstimator", "[", 
   RowBox[{"bootstrapFinal", ",", "bootstrapSamplesTimes", ",", 
    RowBox[{"Method", "\[Rule]", "\"\<InterpolatedAutocorrelation\>\""}], ",", 
    RowBox[{"InterpolationOptions", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{"InterpolationOrder", "\[Rule]", "3"}], "}"}]}]}], " ", 
   "]"}]}]], "Input",
 CellLabel->"In[1]:=",
 CellID->553453551],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.5767092870148834`", ",", "0.22818296453307824`", ",", 
   "0.07984056740222222`", ",", "0.020000729268916554`", ",", 
   "0.03651414408167906`", ",", "0.10335002135683954`", ",", 
   "0.0444726315180392`", ",", "0.07113125030256602`", ",", 
   "0.07861294160412237`", ",", "0.05548639844938872`", ",", 
   "0.04737223383714013`", ",", "0.044115719585977785`", ",", 
   "0.03833067652732345`", ",", "0.024838566188891718`"}], "}"}]], "Output",
 CellLabel->"Out[1]=",
 CellID->1263572477]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 "LombScargleOptions",
 "\[NonBreakingSpace]\[NonBreakingSpace]",
 Cell["(1)", "ExampleCount"]
}], "ExampleSubsection", "ExampleSubsection",
 WholeCellGroupOpener->True],

Cell["\<\
LombScargleOptions allows us to pass options for the internal LombScargle \
function used (which is the default Method option).\
\>", "ExampleText",
 CellID->274829811],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"bootstrapLombScargleOpts", "=", 
  RowBox[{"QuantileEstimator", "[", 
   RowBox[{"bootstrapFinal", ",", "bootstrapSamplesTimes", ",", 
    RowBox[{"LombScargleOptions", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{"NormalizeIntensities", "\[Rule]", "False"}], "}"}]}]}], " ", 
   "]"}]}]], "Input",
 CellLabel->"In[1]:=",
 CellID->813284071],

Cell[BoxData["3.37476306715987`"], "Output",
 CellLabel->"Out[1]=",
 CellID->1681827157]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 "Method",
 "\[NonBreakingSpace]\[NonBreakingSpace]",
 Cell["(1)", "ExampleCount"]
}], "ExampleSubsection", "ExampleSubsection",
 WholeCellGroupOpener->True],

Cell["\<\
We may choose different methods for the calculations (usually depending on \
the downstream application):\
\>", "ExampleText",
 CellID->1680205565],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"bootstrapAutocorrelation", "=", 
  RowBox[{"QuantileEstimator", "[", 
   RowBox[{"bootstrapFinal", ",", "bootstrapSamplesTimes", ",", 
    RowBox[{"Method", "\[Rule]", "\"\<Autocorrelation\>\""}]}], " ", 
   "]"}]}]], "Input",
 CellLabel->"In[1]:=",
 CellID->2087892637],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.06622088774816004`", ",", "0.813067161519365`", ",", 
   "0.2518337898727185`", ",", "0.5628950213075871`", ",", 
   "0.40263529741258103`", ",", "0.4800410257202947`", ",", 
   "0.2848049777134134`"}], "}"}]], "Output",
 CellLabel->"Out[1]=",
 CellID->301002697]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"bootstrapInterpolatedAutocorrelation", "=", 
  RowBox[{"QuantileEstimator", "[", 
   RowBox[{"bootstrapFinal", ",", "bootstrapSamplesTimes", ",", 
    RowBox[{"Method", "\[Rule]", "\"\<InterpolatedAutocorrelation\>\""}]}], 
   " ", "]"}]}]], "Input",
 CellLabel->"In[2]:=",
 CellID->858826129],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.5767092870148834`", ",", "0.22818296453307824`", ",", 
   "0.07984056740222222`", ",", "0.020000729268916554`", ",", 
   "0.03651414408167906`", ",", "0.10335002135683954`", ",", 
   "0.0444726315180392`", ",", "0.07113125030256602`", ",", 
   "0.07861294160412237`", ",", "0.05548639844938872`", ",", 
   "0.04737223383714013`", ",", "0.044115719585977785`", ",", 
   "0.03833067652732345`", ",", "0.024838566188891718`"}], "}"}]], "Output",
 CellLabel->"Out[2]=",
 CellID->1628339794]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"bootstrapSpikes", "=", 
  RowBox[{"QuantileEstimator", "[", 
   RowBox[{"bootstrapFinal", ",", "bootstrapSamplesTimes", ",", 
    RowBox[{"Method", "\[Rule]", "\"\<Spikes\>\""}]}], " ", "]"}]}]], "Input",\

 CellLabel->"In[3]:=",
 CellID->784164983],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"12", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"0.8228330762350156`", ",", 
      RowBox[{"-", "0.4261969070869057`"}]}], "}"}]}], ",", 
   RowBox[{"14", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"0.7252958891607152`", ",", 
      RowBox[{"-", "0.4086136631682469`"}]}], "}"}]}], ",", 
   RowBox[{"13", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"0.8005643321852428`", ",", 
      RowBox[{"-", "0.4119665786316792`"}]}], "}"}]}], ",", 
   RowBox[{"15", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"0.6932431128686393`", ",", 
      RowBox[{"-", "0.28708611417776286`"}]}], "}"}]}]}], 
  "\[RightAssociation]"}]], "Output",
 CellLabel->"Out[3]=",
 CellID->2122804037]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 "QuantileValue",
 "\[NonBreakingSpace]\[NonBreakingSpace]",
 Cell["(1)", "ExampleCount"]
}], "ExampleSubsection", "ExampleSubsection",
 WholeCellGroupOpener->True,
 CellID->1050773186],

Cell["\<\
QuantileValue is an option to select which quantile to report. The default is \
the 0.95 quantile. We change this to 0.99 here:\
\>", "ExampleText",
 CellID->1833903414],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"bootstrapQ99", "=", 
  RowBox[{"QuantileEstimator", "[", 
   RowBox[{"bootstrapFinal", ",", "bootstrapSamplesTimes", ",", 
    RowBox[{"QuantileValue", "\[Rule]", " ", ".99"}]}], "]"}]}]], "Input",
 CellLabel->"In[1]:=",
 CellID->1914614113],

Cell[BoxData["0.9152526787478658`"], "Output",
 CellLabel->"Out[1]=",
 CellID->1821622248]
}, Open  ]]
}, Closed]]
}, Closed]],

Cell["", "SectionFooterSpacer"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 Cell[BoxData[
  TemplateBox[{6},
   "Spacer1"]]],
 "See Also"
}], "SeeAlsoSection",
 WholeCellGroupOpener->True,
 CellID->1255426704],

Cell[TextData[{
 Cell[BoxData[
  TemplateBox[{
    Cell[
     TextData["Autocorrelation"]], "paclet:MathIOmica/ref/Autocorrelation"},
   "RefLink",
   BaseStyle->{"InlineFormula", FontFamily -> "Verdana"}]], "InlineFormula"],
 "\[NonBreakingSpace]",
 StyleBox["\[MediumSpace]\[FilledVerySmallSquare]\[MediumSpace]", 
  "InlineSeparator"],
 " ",
 Cell[BoxData[
  TemplateBox[{
    Cell[
     TextData["BootstrapGeneral"]], "paclet:MathIOmica/ref/BootstrapGeneral"},
   
   "RefLink",
   BaseStyle->{"InlineFormula", FontFamily -> "Verdana"}]], "InlineFormula"],
 "\[NonBreakingSpace]",
 StyleBox["\[MediumSpace]\[FilledVerySmallSquare]\[MediumSpace]", 
  "InlineSeparator"],
 " ",
 Cell[BoxData[
  TemplateBox[{
    Cell[
     TextData["LombScargle"]], "paclet:MathIOmica/ref/LombScargle"},
   "RefLink",
   BaseStyle->{"InlineFormula", FontFamily -> "Verdana"}]], "InlineFormula"],
 "\[NonBreakingSpace]",
 StyleBox["\[MediumSpace]\[FilledVerySmallSquare]\[MediumSpace]", 
  "InlineSeparator"],
 " ",
 Cell[BoxData[
  TemplateBox[{
    Cell[
     TextData["OmicsObject"]], "paclet:MathIOmica/ref/OmicsObject"},
   "RefLink",
   BaseStyle->{"InlineFormula", FontFamily -> "Verdana"}]], "InlineFormula"]
}], "SeeAlso",
 CellID->929782353]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 Cell[BoxData[
  TemplateBox[{6},
   "Spacer1"]]],
 "Tutorials"
}], "TutorialsSection",
 WholeCellGroupOpener->True,
 CellID->250839057],

Cell["", "SectionHeaderSpacer"],

Cell[BoxData[
 TemplateBox[{
   Cell[
    TextData["MathIOmicaTutorial"]], 
   "paclet:MathIOmica/tutorial/MathIOmicaTutorial"},
  "RefLink",
  BaseStyle->"Tutorials"]], "Tutorials",
 CellID->341631938],

Cell[BoxData[
 TemplateBox[{
   Cell[
    TextData["MathIOmica Dynamic Transcriptome"]], 
   "paclet:MathIOmica/tutorial/MathIOmicaDynamicTranscriptome"},
  "RefLink",
  BaseStyle->"Tutorials"]], "Tutorials",
 CellID->446304022],

Cell["", "SectionFooterSpacer"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 Cell[BoxData[
  TemplateBox[{6},
   "Spacer1"]]],
 "Related Guides"
}], "MoreAboutSection",
 WholeCellGroupOpener->True,
 CellID->38303248],

Cell["", "SectionHeaderSpacer"],

Cell[BoxData[
 TemplateBox[{
   Cell[
    TextData["MathIOmica Guide"]], "paclet:MathIOmica/guide/MathIOmicaGuide"},
  
  "RefLink",
  BaseStyle->"MoreAbout"]], "MoreAbout",
 CellID->1306682228],

Cell["", "SectionFooterSpacer"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 Cell[BoxData[
  TemplateBox[{6},
   "Spacer1"]]],
 "Related Links"
}], "RelatedLinksSection",
 WholeCellGroupOpener->True,
 CellID->1584193535],

Cell["", "SectionHeaderSpacer"],

Cell[BoxData[
 TemplateBox[{
   Cell[
    TextData["MathIOmicaGuide"]], "paclet:MathIOmica/guide/MathIOmicaGuide"},
  "RefLink",
  BaseStyle->"RelatedLinks"]], "RelatedLinks",
 CellID->1038487239],

Cell[BoxData[
 TemplateBox[{
   Cell[
    TextData["MathIOmicaOverview"]], 
   "paclet:MathIOmica/tutorial/MathIOmicaOverview"},
  "RefLink",
  BaseStyle->"RelatedLinks"]], "RelatedLinks",
 CellID->1462652359]
}, Open  ]],

Cell[" ", "FooterCell"]
},
Saveable->False,
ScreenStyleEnvironment->"Working",
WindowSize->{725, 750},
WindowMargins->{{0, Automatic}, {Automatic, 0}},
WindowTitle->"QuantileEstimator",
TaggingRules->{
 "ModificationHighlight" -> False, "ColorType" -> "SymbolColor", "LinkTrails" -> 
  GridBox[{{
      RowBox[{
        ButtonBox[
        "Mathematica", ButtonData -> "paclet:MathIOmica/guide/MathIOmica", 
         BaseStyle -> {"Link", "DockedLinkTrail"}]}]}}, ColumnAlignments -> 
    Left], "HasOptions" -> False, "ExampleCounter" -> 1, "NeedPlatMsgIn" -> 
  None, "RootCaptions" -> "", 
  "Metadata" -> {
   "built" -> "{2020, 7, 23, 22, 3, 5.675280}", 
    "history" -> {"XX", "", "", ""}, "context" -> 
    "MathIOmica`DataProcessing`", "keywords" -> {}, "specialkeywords" -> {}, 
    "tutorialcollectionlinks" -> {}, "index" -> True, "label" -> 
    "Math I Omica Package Symbol", "language" -> "en", "paclet" -> 
    "MathIOmica Package", "status" -> "None", "summary" -> 
    "QuantileEstimator[data, timepoints] obtains the quantile estimator \
following bootstrap for time series.", "synonyms" -> {}, "tabletags" -> {}, 
    "title" -> "QuantileEstimator", "titlemodifier" -> "", "windowtitle" -> 
    "QuantileEstimator", "type" -> "Symbol", "uri" -> 
    "MathIOmica/ref/QuantileEstimator", "WorkflowDockedCell" -> ""}, 
  "SearchTextTranslated" -> "", "NewStyles" -> False},
CellContext->"Global`",
FrontEndVersion->"12.1 for Mac OS X x86 (64-bit) (June 19, 2020)",
StyleDefinitions->Notebook[{
   Cell[
    StyleData[
    StyleDefinitions -> FrontEnd`FileName[{"Wolfram"}, "Reference.nb"]]], 
   Cell[
    StyleData["Input"], CellContext -> "Global`"], 
   Cell[
    StyleData["Output"], CellContext -> "Global`"]}, Visible -> False, 
  FrontEndVersion -> "12.1 for Mac OS X x86 (64-bit) (June 19, 2020)", 
  StyleDefinitions -> "Default.nb"]
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{
 "PrimaryExamplesSection"->{
  Cell[13899, 378, 269, 10, 70, "PrimaryExamplesSection",ExpressionUUID->"eea90f69-9e6b-4dd6-a690-4803b16d0323",
   CellTags->"PrimaryExamplesSection",
   CellID->1662269715]}
 }
*)
(*CellTagsIndex
CellTagsIndex->{
 {"PrimaryExamplesSection", 266186, 6518}
 }
*)
(*NotebookFileOutline
Notebook[{
Cell[589, 21, 4781, 117, 70, "AnchorBarGrid",ExpressionUUID->"df4878da-7fa7-49a1-8a8f-d6a166006f97",
 CellID->1],
Cell[CellGroupData[{
Cell[5395, 142, 174, 6, 70, "ObjectNameGrid",ExpressionUUID->"af8e6fa0-295b-4142-a0f2-3093c52f2c52"],
Cell[5572, 150, 434, 12, 70, "Usage",ExpressionUUID->"eb43d358-e63b-43f5-8622-67b8287d7a36"]
}, Open  ]],
Cell[CellGroupData[{
Cell[6043, 167, 630, 19, 70, "NotesSection",ExpressionUUID->"20768898-f63c-4a37-a6e3-d627c4a071ca",
 CellGroupingRules->{"SectionGrouping", 50},
 CellID->1227999055],
Cell[6676, 188, 31, 0, 70, "SectionHeaderSpacer",ExpressionUUID->"a3ca0229-4ddc-4549-a54b-fc55eb450087"],
Cell[6710, 190, 393, 12, 70, "Notes",ExpressionUUID->"7b1139e4-641d-484c-9a8c-9ce89b8dc521",
 CellID->992580824],
Cell[7106, 204, 531, 13, 70, "2ColumnTableMod",ExpressionUUID->"7f0f44b9-0f08-4713-9dd0-2e7d6788f3d4",
 CellID->27415112],
Cell[7640, 219, 53, 0, 70, "Notes",ExpressionUUID->"970c46f6-7024-489d-83d6-65e03f95cd40"],
Cell[7696, 221, 1848, 41, 70, "3ColumnTableMod",ExpressionUUID->"38b93a70-e097-411e-9d9e-b98e2a9d3d00",
 CellID->1380656426],
Cell[9547, 264, 113, 3, 70, "Notes",ExpressionUUID->"33df6f9c-6774-4535-8924-cd9cb4295617",
 CellID->285909606],
Cell[9663, 269, 4165, 102, 70, "2ColumnTableMod",ExpressionUUID->"cd48fcb3-dd6e-43a7-8ef9-cf7d52594efb",
 CellID->2062196345],
Cell[13831, 373, 31, 0, 70, "SectionFooterSpacer",ExpressionUUID->"599823be-698b-49b1-8817-54fb63a88d76"]
}, Closed]],
Cell[CellGroupData[{
Cell[13899, 378, 269, 10, 70, "PrimaryExamplesSection",ExpressionUUID->"eea90f69-9e6b-4dd6-a690-4803b16d0323",
 CellTags->"PrimaryExamplesSection",
 CellID->1662269715],
Cell[CellGroupData[{
Cell[14193, 392, 196, 6, 70, "ExampleSection",ExpressionUUID->"71259854-33a7-43b6-a791-bd24f5fe1aa0",
 CellID->1152336182],
Cell[14392, 400, 321, 6, 70, "ExampleText",ExpressionUUID->"dad4846c-9d6a-4a43-ad9a-e3d57ed5b282",
 CellID->584355490]
}, Open  ]],
Cell[CellGroupData[{
Cell[14750, 411, 181, 6, 70, "ExampleSection",ExpressionUUID->"ba48f1df-2201-45d3-90a3-dd57b2e4e731",
 CellID->764448546],
Cell[14934, 419, 120, 3, 70, "Input",ExpressionUUID->"c42590f1-8af6-4ad5-915a-baa905a4903c",
 CellID->1872068367],
Cell[15057, 424, 492, 13, 70, "ExampleText",ExpressionUUID->"5d37582e-2531-405f-a511-e53371ba1336",
 CellID->1936718175],
Cell[15552, 439, 904, 31, 70, "Input",ExpressionUUID->"2f234db4-6570-441b-9e64-0a4a8c57ce62",
 CellID->2008746089],
Cell[16459, 472, 125, 3, 70, "ExampleText",ExpressionUUID->"67fb6a08-b0c1-4067-ba59-3b01b2a5c3bf",
 CellID->2139257847],
Cell[CellGroupData[{
Cell[16609, 479, 272, 8, 70, "Input",ExpressionUUID->"bb78afc5-163b-4326-86dc-df26ff33f6a6",
 CellID->2081616074],
Cell[16884, 489, 583, 17, 70, "Output",ExpressionUUID->"5142bdec-fffb-48d9-9cd5-b39aff626afd",
 CellID->1182692406]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[17516, 512, 208, 6, 70, "ExampleSection",ExpressionUUID->"5f3a9d72-0af1-4357-a089-3073a942c950",
 CellID->1631825547],
Cell[17727, 520, 119, 3, 70, "Input",ExpressionUUID->"6ee5dcad-cd34-4a27-9ca3-998c9048b4e4",
 CellID->796347577],
Cell[17849, 525, 148, 4, 70, "ExampleText",ExpressionUUID->"be362d85-61f4-4883-9b62-c04b0b3add02",
 CellID->2095379217],
Cell[18000, 531, 249, 8, 70, "Input",ExpressionUUID->"6c7860da-5f2d-48be-978c-2cad43a539f4",
 CellID->308114169],
Cell[18252, 541, 68, 1, 70, "ExampleText",ExpressionUUID->"bb0436c5-4be9-4985-904f-966a64078bde",
 CellID->1657780598],
Cell[18323, 544, 167, 5, 70, "Input",ExpressionUUID->"0cfef57e-d912-4190-89da-e909c6d7b2c5",
 CellID->907864055],
Cell[18493, 551, 255, 5, 70, "ExampleText",ExpressionUUID->"7f734cfd-fa14-480d-8751-4a614ec86f04",
 CellID->674676559],
Cell[18751, 558, 208, 6, 70, "Input",ExpressionUUID->"64b7ad0a-feab-4c07-bba2-56009fdf99e9",
 CellID->919442043],
Cell[18962, 566, 268, 5, 70, "ExampleText",ExpressionUUID->"25b40b7f-6a90-40f9-907f-1e08d01728f4",
 CellID->617424127],
Cell[CellGroupData[{
Cell[19255, 575, 189, 6, 70, "Input",ExpressionUUID->"ecb89721-b8fc-468b-9777-ac926f1eebba",
 CellID->1073555929],
Cell[19447, 583, 15038, 439, 70, "Output",ExpressionUUID->"4fac64ca-d3eb-4a50-a0ec-53f98b5cefa6",
 CellID->1920218630]
}, Open  ]],
Cell[34500, 1025, 144, 4, 70, "ExampleText",ExpressionUUID->"423a6370-f562-4607-8c66-0a08760b3844",
 CellID->931937253],
Cell[34647, 1031, 190, 6, 70, "Input",ExpressionUUID->"a9cf57a9-3758-464a-89d7-209bab96e390",
 CellID->1536255687],
Cell[34840, 1039, 89, 1, 70, "ExampleText",ExpressionUUID->"d75b65bf-081e-483e-964e-19b782487df3",
 CellID->2120845511],
Cell[CellGroupData[{
Cell[34954, 1044, 118, 2, 70, "Input",ExpressionUUID->"f2a3a76c-2952-43b4-b306-4fcf3bec710d",
 CellID->247413123],
Cell[35075, 1048, 11124, 276, 70, "Output",ExpressionUUID->"809c0dff-d4b2-4f2f-8f02-8d112de3f4ed",
 CellID->1294413341]
}, Open  ]],
Cell[46214, 1327, 125, 3, 70, "ExampleText",ExpressionUUID->"96ce3e7e-88e4-4cf4-b679-fdadf02904b4",
 CellID->990347941],
Cell[CellGroupData[{
Cell[46364, 1334, 280, 6, 70, "Input",ExpressionUUID->"53099b93-8366-4435-96ed-ad869999c7d6",
 CellID->1212756079],
Cell[46647, 1342, 11312, 281, 70, "Output",ExpressionUUID->"31c08626-0b46-4a99-a8bf-91fed4f73158",
 CellID->1756955160]
}, Open  ]],
Cell[57974, 1626, 175, 4, 70, "ExampleText",ExpressionUUID->"c8f9d7f4-14ed-4f88-b5f1-5d01086bf598",
 CellID->442464879],
Cell[CellGroupData[{
Cell[58174, 1634, 312, 9, 70, "Input",ExpressionUUID->"4c7c4a66-ab75-4462-9df0-b9375615e235",
 CellID->430930498],
Cell[CellGroupData[{
Cell[58511, 1647, 10439, 300, 70, "Print",ExpressionUUID->"d279120e-39e1-4604-942e-df6c1c47ec69",
 CellID->2004056391],
Cell[68953, 1949, 895, 22, 70, "Print",ExpressionUUID->"d08ceb9a-0e74-4dd9-b9c5-790a545a6187",
 CellID->1042243989],
Cell[69851, 1973, 130177, 2672, 70, "Print",ExpressionUUID->"f4c6c6cb-0ee4-452c-905d-5271b5a16d28",
 CellID->2118098191]
}, Open  ]]
}, Open  ]],
Cell[200055, 4649, 85, 1, 70, "ExampleText",ExpressionUUID->"503faeeb-0693-4396-b46b-4c3a56f2aec5",
 CellID->630631678],
Cell[CellGroupData[{
Cell[200165, 4654, 169, 4, 70, "Input",ExpressionUUID->"c4fe87ae-446c-4120-875b-16dae517bc7a",
 CellID->1892186508],
Cell[200337, 4660, 8578, 217, 70, "Output",ExpressionUUID->"5212a738-ede9-4284-8295-a4be25d73914",
 CellID->1689603943]
}, Open  ]],
Cell[208930, 4880, 76, 1, 70, "ExampleText",ExpressionUUID->"837b351d-e3bc-4532-abef-2411dea63e99",
 CellID->2087257694],
Cell[CellGroupData[{
Cell[209031, 4885, 203, 5, 70, "Input",ExpressionUUID->"d7bcbe86-47bc-474d-887e-cc524803aa20",
 CellID->1376004265],
Cell[209237, 4892, 9119, 229, 70, "Output",ExpressionUUID->"21d0efd7-c31b-4c8f-a682-128b44ca518c",
 CellID->70476615]
}, Open  ]],
Cell[218371, 5124, 152, 4, 70, "ExampleText",ExpressionUUID->"618ecb8e-6932-43f1-85f9-899fe1ba37c0",
 CellID->1146032319],
Cell[CellGroupData[{
Cell[218548, 5132, 246, 6, 70, "Input",ExpressionUUID->"8c10a369-754f-40ae-9659-c5afe3259b18",
 CellID->806436591],
Cell[218797, 5140, 10441, 256, 70, "Output",ExpressionUUID->"fbb4f872-87a0-49cd-af0c-04d477fb752a",
 CellID->113639449]
}, Open  ]],
Cell[229253, 5399, 90, 1, 70, "ExampleText",ExpressionUUID->"88f3518f-5f51-4281-a1f7-039ddcf8a961",
 CellID->1578738512],
Cell[CellGroupData[{
Cell[229368, 5404, 192, 5, 70, "Input",ExpressionUUID->"9091f222-757c-458e-828b-a98f7184d9f2",
 CellID->96638786],
Cell[229563, 5411, 9080, 227, 70, "Output",ExpressionUUID->"e9c65e04-fc70-4817-909d-a30997226823",
 CellID->1647695794]
}, Open  ]],
Cell[238658, 5641, 75, 1, 70, "ExampleText",ExpressionUUID->"c8b4425c-f410-426c-8110-5f1050e065fe",
 CellID->2035432211],
Cell[CellGroupData[{
Cell[238758, 5646, 167, 4, 70, "Input",ExpressionUUID->"d33335b8-cd80-400e-a76c-f4e2380aad05",
 CellID->2135057265],
Cell[238928, 5652, 9079, 227, 70, "Output",ExpressionUUID->"4e8cb01c-1098-418e-aea9-85725791b8f5",
 CellID->591756486]
}, Open  ]],
Cell[248022, 5882, 82, 1, 70, "ExampleText",ExpressionUUID->"75d2620e-b531-45e3-bb80-1ebc6612b73b",
 CellID->1596932119],
Cell[248107, 5885, 233, 5, 70, "ExampleText",ExpressionUUID->"aaca5af1-2816-4f60-801b-79268d54dfce",
 CellID->1626515394],
Cell[CellGroupData[{
Cell[248365, 5894, 168, 4, 70, "Input",ExpressionUUID->"a42a7866-8817-46a3-bf5c-04afb6505a07",
 CellID->1769405766],
Cell[248536, 5900, 270, 7, 70, "Output",ExpressionUUID->"7600c298-1505-482f-b3ae-3f7cc5895266",
 CellID->618072681]
}, Open  ]],
Cell[248821, 5910, 164, 4, 70, "ExampleText",ExpressionUUID->"8a24229b-f820-4c09-ad2e-ac0fbfc50e43",
 CellID->1288167328],
Cell[248988, 5916, 867, 22, 70, "Input",ExpressionUUID->"c0e312da-c7f7-4367-8462-60ab6119fab4",
 CellID->950392958],
Cell[CellGroupData[{
Cell[249880, 5942, 234, 7, 70, "Input",ExpressionUUID->"4b258a04-0d34-4ea7-90bd-256b76a389f8",
 CellID->544095634],
Cell[250117, 5951, 288, 7, 70, "Output",ExpressionUUID->"f466f06f-5ba2-4120-bca4-0404cc34c9bf",
 CellID->150975640]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[250454, 5964, 221, 6, 70, "ExampleSection",ExpressionUUID->"9ff3bf3c-e932-4204-b843-59b88d695da1",
 CellID->1562605548],
Cell[250678, 5972, 325, 10, 70, "ExampleText",ExpressionUUID->"231dbce7-e5c2-46ed-9a2e-366a05c3a9a4",
 CellID->17097794],
Cell[CellGroupData[{
Cell[251028, 5986, 208, 6, 70, "Input",ExpressionUUID->"44e1a970-fcfa-4917-900b-16451f7830a7",
 CellID->1415065210],
Cell[251239, 5994, 89, 2, 70, "Output",ExpressionUUID->"772f85d2-e48e-4898-a133-06ca8e0ce45b",
 CellID->89198783]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[251377, 6002, 168, 5, 70, "ExampleSection",ExpressionUUID->"59fc5345-f533-4fc3-a072-8cb99af1270e"],
Cell[251548, 6009, 120, 3, 70, "Input",ExpressionUUID->"b6a6ab60-016a-4e97-bd2b-c251f85a9630",
 CellID->1321477493],
Cell[251671, 6014, 252, 5, 70, "ExampleText",ExpressionUUID->"176bc4bf-0a81-4543-9e74-71e325f25498",
 CellID->832831966],
Cell[CellGroupData[{
Cell[251948, 6023, 189, 5, 70, "ExampleSubsection",ExpressionUUID->"1e6e4887-7c50-43fb-8e6f-1a5f64d09bf5"],
Cell[252140, 6030, 400, 11, 70, "ExampleText",ExpressionUUID->"cdc979d1-94ed-4362-9035-d6aacb242594",
 CellID->267670933],
Cell[CellGroupData[{
Cell[252565, 6045, 438, 10, 70, "Input",ExpressionUUID->"459386aa-cde2-43f8-bab5-a5a634ea2214",
 CellID->1087404876],
Cell[253006, 6057, 309, 8, 70, "Output",ExpressionUUID->"99427daa-c3ac-459e-b094-512c07b5c14f",
 CellID->1333334497]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[253364, 6071, 205, 6, 70, "ExampleSubsection",ExpressionUUID->"5af49cc6-b4e2-42a3-aa87-98ef689e4d64",
 CellID->82508222],
Cell[253572, 6079, 293, 6, 70, "ExampleText",ExpressionUUID->"ecb99177-02fa-4508-994d-b68dc1c705ba",
 CellID->1588734839],
Cell[CellGroupData[{
Cell[253890, 6089, 355, 7, 70, "Input",ExpressionUUID->"7c87f1db-3a46-4c06-86c4-c1ec8d8611a2",
 CellID->54772275],
Cell[254248, 6098, 346, 8, 70, "Output",ExpressionUUID->"741124ec-cc70-4c2d-abea-34a8935f7a5a",
 CellID->1267790863]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[254643, 6112, 208, 6, 70, "ExampleSubsection",ExpressionUUID->"c76efbb5-f697-4110-91c1-574bee5ddea8",
 CellID->1452445506],
Cell[254854, 6120, 381, 9, 70, "ExampleText",ExpressionUUID->"fe6cd78f-ac33-4475-9a8e-03b3abfd86ae",
 CellID->805003893],
Cell[CellGroupData[{
Cell[255260, 6133, 441, 10, 70, "Input",ExpressionUUID->"e72fa10b-6376-42ab-bf90-48a0d045326e",
 CellID->553453551],
Cell[255704, 6145, 531, 11, 70, "Output",ExpressionUUID->"c5acbccf-87a9-42c3-831f-1628dbf9c025",
 CellID->1263572477]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[256284, 6162, 185, 5, 70, "ExampleSubsection",ExpressionUUID->"78776118-398d-4e0a-8d92-3072b6ff1ee2"],
Cell[256472, 6169, 178, 4, 70, "ExampleText",ExpressionUUID->"a64bd9d2-9850-4308-8eb0-eac41e5c1c5c",
 CellID->274829811],
Cell[CellGroupData[{
Cell[256675, 6177, 365, 9, 70, "Input",ExpressionUUID->"855050e7-d9c0-42e5-9cae-39a323081dee",
 CellID->813284071],
Cell[257043, 6188, 88, 2, 70, "Output",ExpressionUUID->"788c64c1-ce90-4170-b815-5a4f84f32a06",
 CellID->1681827157]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[257180, 6196, 173, 5, 70, "ExampleSubsection",ExpressionUUID->"9bcb77cc-c54b-48f2-aeda-bc2ed2c0d002"],
Cell[257356, 6203, 157, 4, 70, "ExampleText",ExpressionUUID->"a3c45709-aca6-429d-81b0-3310b1780b87",
 CellID->1680205565],
Cell[CellGroupData[{
Cell[257538, 6211, 294, 7, 70, "Input",ExpressionUUID->"f6c7776c-8e96-42cd-8817-1d2c21bd3f45",
 CellID->2087892637],
Cell[257835, 6220, 308, 8, 70, "Output",ExpressionUUID->"c35a0325-10b3-40ac-bff9-26c3bb9bb668",
 CellID->301002697]
}, Open  ]],
Cell[CellGroupData[{
Cell[258180, 6233, 317, 7, 70, "Input",ExpressionUUID->"9eb4c778-e57a-46f8-8da7-f65138ae408d",
 CellID->858826129],
Cell[258500, 6242, 531, 11, 70, "Output",ExpressionUUID->"ff7594a7-2ce7-4352-a05c-fab4aca58498",
 CellID->1628339794]
}, Open  ]],
Cell[CellGroupData[{
Cell[259068, 6258, 273, 7, 70, "Input",ExpressionUUID->"eb81d96f-badb-4d82-b996-ba26a4fe9fc3",
 CellID->784164983],
Cell[259344, 6267, 736, 21, 70, "Output",ExpressionUUID->"26cbd58a-0de2-4a6d-ae17-e7e577f36212",
 CellID->2122804037]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[260129, 6294, 201, 6, 70, "ExampleSubsection",ExpressionUUID->"a835db08-6cb3-44b4-9f93-aa7895d90467",
 CellID->1050773186],
Cell[260333, 6302, 179, 4, 70, "ExampleText",ExpressionUUID->"f9d6aeed-775e-458f-b759-b52929b32188",
 CellID->1833903414],
Cell[CellGroupData[{
Cell[260537, 6310, 265, 6, 70, "Input",ExpressionUUID->"20c0960f-fc90-45b4-bea3-e304800a1d4a",
 CellID->1914614113],
Cell[260805, 6318, 90, 2, 70, "Output",ExpressionUUID->"3c6a427d-b620-484c-84d0-9876251383e7",
 CellID->1821622248]
}, Open  ]]
}, Closed]]
}, Closed]],
Cell[260934, 6325, 31, 0, 70, "SectionFooterSpacer",ExpressionUUID->"98575a95-dd7b-45fb-9cb8-f705b9eed04d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[261002, 6330, 150, 7, 70, "SeeAlsoSection",ExpressionUUID->"54cf15e6-59dd-4d45-9250-a48d34338aab",
 CellID->1255426704],
Cell[261155, 6339, 1236, 39, 70, "SeeAlso",ExpressionUUID->"096a515b-958f-401c-9b72-79abf50bf831",
 CellID->929782353]
}, Open  ]],
Cell[CellGroupData[{
Cell[262428, 6383, 152, 7, 70, "TutorialsSection",ExpressionUUID->"6dd966c5-285c-424d-9210-455c4e972ab6",
 CellID->250839057],
Cell[262583, 6392, 31, 0, 70, "SectionHeaderSpacer",ExpressionUUID->"da69862f-8207-4528-83d8-82c1571f9d85"],
Cell[262617, 6394, 202, 7, 70, "Tutorials",ExpressionUUID->"6ccef7fb-39ab-42b1-be1f-68d7f2abc868",
 CellID->341631938],
Cell[262822, 6403, 228, 7, 70, "Tutorials",ExpressionUUID->"2955b621-6866-4fc4-84a8-d0ed9c988ce4",
 CellID->446304022],
Cell[263053, 6412, 31, 0, 70, "SectionFooterSpacer",ExpressionUUID->"fd692eb4-8cee-478c-b9db-b7794932c7f8"]
}, Open  ]],
Cell[CellGroupData[{
Cell[263121, 6417, 156, 7, 70, "MoreAboutSection",ExpressionUUID->"9d045727-7298-4d34-9faa-eefd91b45efd",
 CellID->38303248],
Cell[263280, 6426, 31, 0, 70, "SectionHeaderSpacer",ExpressionUUID->"2f9a70fc-d792-4df5-950e-c501b48e2718"],
Cell[263314, 6428, 194, 7, 70, "MoreAbout",ExpressionUUID->"864afb39-73f4-41ca-b9e5-f7b613195a66",
 CellID->1306682228],
Cell[263511, 6437, 31, 0, 70, "SectionFooterSpacer",ExpressionUUID->"394a957b-1a54-4856-8c0d-484ce90ec3b6"]
}, Open  ]],
Cell[CellGroupData[{
Cell[263579, 6442, 160, 7, 70, "RelatedLinksSection",ExpressionUUID->"1502aced-b374-4ab8-8ecc-56d54db5af37",
 CellID->1584193535],
Cell[263742, 6451, 31, 0, 70, "SectionHeaderSpacer",ExpressionUUID->"49212245-1fe9-470d-8825-d6b416bba4b4"],
Cell[263776, 6453, 196, 6, 70, "RelatedLinks",ExpressionUUID->"a49456a6-e8c2-4546-8bf3-6dcf0e1dc509",
 CellID->1038487239],
Cell[263975, 6461, 209, 7, 70, "RelatedLinks",ExpressionUUID->"36542014-d216-401c-9903-2c149b4bc91f",
 CellID->1462652359]
}, Open  ]],
Cell[264199, 6471, 23, 0, 70, "FooterCell",ExpressionUUID->"a6a0b07f-eeda-46b6-a4ef-7ea23fcb6f3f"]
}
]
*)

(* End of internal cache information *)
